// Copyright (C) 2022 George Cave.
//
// SPDX-License-Identifier: Apache-2.0
//
// This file is automatically generated from the XML Spec files.
// Re-generate via the script directly (tools/generate_result_code.sh)
// or the 'make autogenerate_code_foe_physics_yaml' target.

#include <catch2/catch_test_macros.hpp>
#include <foe/physics/yaml/result.h>

#define ERROR_CODE_CATCH_CHECK(X)                                                                  \
    SECTION(#X) {                                                                                  \
        foePhysicsYamlResultToString(X, resultString);                                             \
        CHECK(std::string{resultString} == #X);                                                    \
    }

TEST_CASE("foePhysicsYamlResult - Ensure error codes return correct values and strings") {
    char resultString[FOE_MAX_RESULT_STRING_SIZE];

    SECTION("Generic non-existant negative value") {
        foePhysicsYamlResultToString((foePhysicsYamlResult)FOE_RESULT_MIN_ENUM, resultString);
        CHECK(std::string{resultString} == "FOE_PHYSICS_YAML_UNKNOWN_ERROR_2147483647");
    }
    SECTION("Generic non-existant positive value") {
        foePhysicsYamlResultToString((foePhysicsYamlResult)FOE_RESULT_MAX_ENUM, resultString);
        CHECK(std::string{resultString} == "FOE_PHYSICS_YAML_UNKNOWN_SUCCESS_2147483647");
    }

    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_SUCCESS)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_FAILED_TO_REGISTER_COLLISION_SHAPE_IMPORTER)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_FAILED_TO_REGISTER_COLLISION_SHAPE_EXPORTER)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_COLLISION_SHAPE_POOL_NOT_FOUND)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_COLLISION_SHAPE_ALREADY_EXISTS)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_FAILED_TO_REGISTER_RIGID_BODY_IMPORTER)
    ERROR_CODE_CATCH_CHECK(FOE_PHYSICS_YAML_ERROR_FAILED_TO_REGISTER_RIGID_BODY_EXPORTER)
}
