/*
    Copyright (C) 2022 George Cave.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

// NOTE: This file was auto-generated by generate_vk_imgui_code.py

#include <foe/graphics/vk/imgui/display_vk_enums.hpp>

#include <imgui.h>
#include <vk_value_serialization.hpp>

void imgui_VkFramebufferCreateFlags(std::string const &label,
                                    VkFramebufferCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkFramebufferCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueryPoolCreateFlags(std::string const &label, VkQueryPoolCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryPoolCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_QCOM_render_pass_transform
void imgui_VkRenderPassCreateFlags(std::string const &label, VkRenderPassCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkRenderPassCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkSamplerCreateFlags(std::string const &label, VkSamplerCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineLayoutCreateFlags(std::string const &label,
                                       VkPipelineLayoutCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineLayoutCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineCacheCreateFlags(std::string const &label,
                                      VkPipelineCacheCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCacheCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineDepthStencilStateCreateFlags(
    std::string const &label, VkPipelineDepthStencilStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineDepthStencilStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineDynamicStateCreateFlags(std::string const &label,
                                             VkPipelineDynamicStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineDynamicStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineColorBlendStateCreateFlags(std::string const &label,
                                                VkPipelineColorBlendStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineColorBlendStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineMultisampleStateCreateFlags(
    std::string const &label, VkPipelineMultisampleStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineMultisampleStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineRasterizationStateCreateFlags(
    std::string const &label, VkPipelineRasterizationStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineRasterizationStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineViewportStateCreateFlags(std::string const &label,
                                              VkPipelineViewportStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineViewportStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineTessellationStateCreateFlags(
    std::string const &label, VkPipelineTessellationStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineTessellationStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineInputAssemblyStateCreateFlags(
    std::string const &label, VkPipelineInputAssemblyStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineInputAssemblyStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineVertexInputStateCreateFlags(
    std::string const &label, VkPipelineVertexInputStateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineVertexInputStateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineShaderStageCreateFlags(std::string const &label,
                                            VkPipelineShaderStageCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineShaderStageCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDescriptorSetLayoutCreateFlags(std::string const &label,
                                            VkDescriptorSetLayoutCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorSetLayoutCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBufferViewCreateFlags(std::string const &label, VkBufferViewCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkBufferViewCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkInstanceCreateFlags(std::string const &label, VkInstanceCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkInstanceCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDeviceCreateFlags(std::string const &label, VkDeviceCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDeviceQueueCreateFlags(std::string const &label,
                                    VkDeviceQueueCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceQueueCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueueFlags(std::string const &label, VkQueueFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkQueueFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkMemoryPropertyFlags(std::string const &label, VkMemoryPropertyFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryPropertyFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkMemoryHeapFlags(std::string const &label, VkMemoryHeapFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryHeapFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkAccessFlags(std::string const &label, VkAccessFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkAccessFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBufferUsageFlags(std::string const &label, VkBufferUsageFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkBufferUsageFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBufferCreateFlags(std::string const &label, VkBufferCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkBufferCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkShaderStageFlags(std::string const &label, VkShaderStageFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderStageFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageUsageFlags(std::string const &label, VkImageUsageFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkImageUsageFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageCreateFlags(std::string const &label, VkImageCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkImageCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageViewCreateFlags(std::string const &label, VkImageViewCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkImageViewCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineCreateFlags(std::string const &label, VkPipelineCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkColorComponentFlags(std::string const &label, VkColorComponentFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkColorComponentFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkFenceCreateFlags(std::string const &label, VkFenceCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkFenceCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSemaphoreCreateFlags(std::string const &label, VkSemaphoreCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkFormatFeatureFlags(std::string const &label, VkFormatFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkFormatFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueryControlFlags(std::string const &label, VkQueryControlFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryControlFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueryResultFlags(std::string const &label, VkQueryResultFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryResultFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkShaderModuleCreateFlags(std::string const &label,
                                     VkShaderModuleCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderModuleCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkEventCreateFlags(std::string const &label, VkEventCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkEventCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCommandPoolCreateFlags(std::string const &label,
                                    VkCommandPoolCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandPoolCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCommandPoolResetFlags(std::string const &label, VkCommandPoolResetFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandPoolResetFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCommandBufferResetFlags(std::string const &label,
                                     VkCommandBufferResetFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandBufferResetFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCommandBufferUsageFlags(std::string const &label,
                                     VkCommandBufferUsageFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandBufferUsageFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueryPipelineStatisticFlags(std::string const &label,
                                         VkQueryPipelineStatisticFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryPipelineStatisticFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkMemoryMapFlags(std::string const &label, VkMemoryMapFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryMapFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageAspectFlags(std::string const &label, VkImageAspectFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkImageAspectFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSparseMemoryBindFlags(std::string const &label, VkSparseMemoryBindFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSparseMemoryBindFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSparseImageFormatFlags(std::string const &label,
                                    VkSparseImageFormatFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSparseImageFormatFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSubpassDescriptionFlags(std::string const &label,
                                     VkSubpassDescriptionFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSubpassDescriptionFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineStageFlags(std::string const &label, VkPipelineStageFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineStageFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSampleCountFlags(std::string const &label, VkSampleCountFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSampleCountFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkAttachmentDescriptionFlags(std::string const &label,
                                        VkAttachmentDescriptionFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkAttachmentDescriptionFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkStencilFaceFlags(std::string const &label, VkStencilFaceFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkStencilFaceFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCullModeFlags(std::string const &label, VkCullModeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCullModeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDescriptorPoolCreateFlags(std::string const &label,
                                       VkDescriptorPoolCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorPoolCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDescriptorPoolResetFlags(std::string const &label,
                                      VkDescriptorPoolResetFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorPoolResetFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDependencyFlags(std::string const &label, VkDependencyFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDependencyFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSubgroupFeatureFlags(std::string const &label, VkSubgroupFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSubgroupFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void imgui_VkIndirectCommandsLayoutUsageFlagsNV(std::string const &label,
                                                VkIndirectCommandsLayoutUsageFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkIndirectCommandsLayoutUsageFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void imgui_VkIndirectStateFlagsNV(std::string const &label, VkIndirectStateFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkIndirectStateFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkGeometryFlagsKHR(std::string const &label, VkGeometryFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkGeometryFlagsNV(std::string const &label, VkGeometryFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkGeometryInstanceFlagsKHR(std::string const &label,
                                      VkGeometryInstanceFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryInstanceFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkGeometryInstanceFlagsNV(std::string const &label,
                                     VkGeometryInstanceFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryInstanceFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkBuildAccelerationStructureFlagsKHR(std::string const &label,
                                                VkBuildAccelerationStructureFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkBuildAccelerationStructureFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkBuildAccelerationStructureFlagsNV(std::string const &label,
                                               VkBuildAccelerationStructureFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkBuildAccelerationStructureFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkPrivateDataSlotCreateFlags(std::string const &label,
                                        VkPrivateDataSlotCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPrivateDataSlotCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void imgui_VkPrivateDataSlotCreateFlagsEXT(std::string const &label,
                                           VkPrivateDataSlotCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPrivateDataSlotCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void imgui_VkAccelerationStructureCreateFlagsKHR(
    std::string const &label, VkAccelerationStructureCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkDescriptorUpdateTemplateCreateFlags(
    std::string const &label, VkDescriptorUpdateTemplateCreateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorUpdateTemplateCreateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_descriptor_update_template
void imgui_VkDescriptorUpdateTemplateCreateFlagsKHR(
    std::string const &label, VkDescriptorUpdateTemplateCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorUpdateTemplateCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkPipelineCreationFeedbackFlags(std::string const &label,
                                           VkPipelineCreationFeedbackFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCreationFeedbackFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
void imgui_VkPipelineCreationFeedbackFlagsEXT(std::string const &label,
                                              VkPipelineCreationFeedbackFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCreationFeedbackFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void imgui_VkPerformanceCounterDescriptionFlagsKHR(
    std::string const &label, VkPerformanceCounterDescriptionFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceCounterDescriptionFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void imgui_VkAcquireProfilingLockFlagsKHR(std::string const &label,
                                          VkAcquireProfilingLockFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAcquireProfilingLockFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkSemaphoreWaitFlags(std::string const &label, VkSemaphoreWaitFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreWaitFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
void imgui_VkSemaphoreWaitFlagsKHR(std::string const &label, VkSemaphoreWaitFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreWaitFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
void imgui_VkPipelineCompilerControlFlagsAMD(std::string const &label,
                                             VkPipelineCompilerControlFlagsAMD const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCompilerControlFlagsAMD", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
void imgui_VkShaderCorePropertiesFlagsAMD(std::string const &label,
                                          VkShaderCorePropertiesFlagsAMD const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderCorePropertiesFlagsAMD", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
void imgui_VkDeviceDiagnosticsConfigFlagsNV(std::string const &label,
                                            VkDeviceDiagnosticsConfigFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceDiagnosticsConfigFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkAccessFlags2(std::string const &label, VkAccessFlags2 const &data) {
    std::string serializedStr;
    vk_serialize("VkAccessFlags2", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void imgui_VkAccessFlags2KHR(std::string const &label, VkAccessFlags2KHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccessFlags2KHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkPipelineStageFlags2(std::string const &label, VkPipelineStageFlags2 const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineStageFlags2", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void imgui_VkPipelineStageFlags2KHR(std::string const &label,
                                    VkPipelineStageFlags2KHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineStageFlags2KHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void imgui_VkAccelerationStructureMotionInfoFlagsNV(
    std::string const &label, VkAccelerationStructureMotionInfoFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureMotionInfoFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void imgui_VkAccelerationStructureMotionInstanceFlagsNV(
    std::string const &label, VkAccelerationStructureMotionInstanceFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureMotionInstanceFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkFormatFeatureFlags2(std::string const &label, VkFormatFeatureFlags2 const &data) {
    std::string serializedStr;
    vk_serialize("VkFormatFeatureFlags2", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
void imgui_VkFormatFeatureFlags2KHR(std::string const &label,
                                    VkFormatFeatureFlags2KHR const &data) {
    std::string serializedStr;
    vk_serialize("VkFormatFeatureFlags2KHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkRenderingFlags(std::string const &label, VkRenderingFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkRenderingFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
void imgui_VkRenderingFlagsKHR(std::string const &label, VkRenderingFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkRenderingFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_surface
void imgui_VkCompositeAlphaFlagsKHR(std::string const &label,
                                    VkCompositeAlphaFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkCompositeAlphaFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_display
void imgui_VkDisplayPlaneAlphaFlagsKHR(std::string const &label,
                                       VkDisplayPlaneAlphaFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDisplayPlaneAlphaFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_display
void imgui_VkSurfaceTransformFlagsKHR(std::string const &label,
                                      VkSurfaceTransformFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSurfaceTransformFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_swapchain
void imgui_VkSwapchainCreateFlagsKHR(std::string const &label,
                                     VkSwapchainCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSwapchainCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_display
void imgui_VkDisplayModeCreateFlagsKHR(std::string const &label,
                                       VkDisplayModeCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDisplayModeCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_display
void imgui_VkDisplaySurfaceCreateFlagsKHR(std::string const &label,
                                          VkDisplaySurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDisplaySurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_android_surface
void imgui_VkAndroidSurfaceCreateFlagsKHR(std::string const &label,
                                          VkAndroidSurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAndroidSurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NN_vi_surface
void imgui_VkViSurfaceCreateFlagsNN(std::string const &label,
                                    VkViSurfaceCreateFlagsNN const &data) {
    std::string serializedStr;
    vk_serialize("VkViSurfaceCreateFlagsNN", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_wayland_surface
void imgui_VkWaylandSurfaceCreateFlagsKHR(std::string const &label,
                                          VkWaylandSurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkWaylandSurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_win32_surface
void imgui_VkWin32SurfaceCreateFlagsKHR(std::string const &label,
                                        VkWin32SurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkWin32SurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_xlib_surface
void imgui_VkXlibSurfaceCreateFlagsKHR(std::string const &label,
                                       VkXlibSurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkXlibSurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_xcb_surface
void imgui_VkXcbSurfaceCreateFlagsKHR(std::string const &label,
                                      VkXcbSurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkXcbSurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
void imgui_VkDirectFBSurfaceCreateFlagsEXT(std::string const &label,
                                           VkDirectFBSurfaceCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDirectFBSurfaceCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_MVK_ios_surface
void imgui_VkIOSSurfaceCreateFlagsMVK(std::string const &label,
                                      VkIOSSurfaceCreateFlagsMVK const &data) {
    std::string serializedStr;
    vk_serialize("VkIOSSurfaceCreateFlagsMVK", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_MVK_macos_surface
void imgui_VkMacOSSurfaceCreateFlagsMVK(std::string const &label,
                                        VkMacOSSurfaceCreateFlagsMVK const &data) {
    std::string serializedStr;
    vk_serialize("VkMacOSSurfaceCreateFlagsMVK", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
void imgui_VkMetalSurfaceCreateFlagsEXT(std::string const &label,
                                        VkMetalSurfaceCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkMetalSurfaceCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
void imgui_VkImagePipeSurfaceCreateFlagsFUCHSIA(std::string const &label,
                                                VkImagePipeSurfaceCreateFlagsFUCHSIA const &data) {
    std::string serializedStr;
    vk_serialize("VkImagePipeSurfaceCreateFlagsFUCHSIA", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
void imgui_VkStreamDescriptorSurfaceCreateFlagsGGP(
    std::string const &label, VkStreamDescriptorSurfaceCreateFlagsGGP const &data) {
    std::string serializedStr;
    vk_serialize("VkStreamDescriptorSurfaceCreateFlagsGGP", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
void imgui_VkHeadlessSurfaceCreateFlagsEXT(std::string const &label,
                                           VkHeadlessSurfaceCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkHeadlessSurfaceCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
void imgui_VkScreenSurfaceCreateFlagsQNX(std::string const &label,
                                         VkScreenSurfaceCreateFlagsQNX const &data) {
    std::string serializedStr;
    vk_serialize("VkScreenSurfaceCreateFlagsQNX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkPeerMemoryFeatureFlags(std::string const &label,
                                    VkPeerMemoryFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkPeerMemoryFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_device_group
void imgui_VkPeerMemoryFeatureFlagsKHR(std::string const &label,
                                       VkPeerMemoryFeatureFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPeerMemoryFeatureFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkMemoryAllocateFlags(std::string const &label, VkMemoryAllocateFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryAllocateFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_device_group
void imgui_VkMemoryAllocateFlagsKHR(std::string const &label,
                                    VkMemoryAllocateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryAllocateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
void imgui_VkDeviceGroupPresentModeFlagsKHR(std::string const &label,
                                            VkDeviceGroupPresentModeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceGroupPresentModeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_debug_report
void imgui_VkDebugReportFlagsEXT(std::string const &label, VkDebugReportFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugReportFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkCommandPoolTrimFlags(std::string const &label, VkCommandPoolTrimFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandPoolTrimFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_maintenance1
void imgui_VkCommandPoolTrimFlagsKHR(std::string const &label,
                                     VkCommandPoolTrimFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandPoolTrimFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_external_memory_capabilities
void imgui_VkExternalMemoryHandleTypeFlagsNV(std::string const &label,
                                             VkExternalMemoryHandleTypeFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryHandleTypeFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_external_memory_capabilities
void imgui_VkExternalMemoryFeatureFlagsNV(std::string const &label,
                                          VkExternalMemoryFeatureFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryFeatureFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalMemoryHandleTypeFlags(std::string const &label,
                                           VkExternalMemoryHandleTypeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryHandleTypeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if (VK_KHR_external_memory_capabilities || VK_EXT_external_memory_host)
void imgui_VkExternalMemoryHandleTypeFlagsKHR(std::string const &label,
                                              VkExternalMemoryHandleTypeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryHandleTypeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalMemoryFeatureFlags(std::string const &label,
                                        VkExternalMemoryFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_memory_capabilities
void imgui_VkExternalMemoryFeatureFlagsKHR(std::string const &label,
                                           VkExternalMemoryFeatureFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalMemoryFeatureFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalSemaphoreHandleTypeFlags(std::string const &label,
                                              VkExternalSemaphoreHandleTypeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalSemaphoreHandleTypeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_semaphore_capabilities
void imgui_VkExternalSemaphoreHandleTypeFlagsKHR(
    std::string const &label, VkExternalSemaphoreHandleTypeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalSemaphoreHandleTypeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalSemaphoreFeatureFlags(std::string const &label,
                                           VkExternalSemaphoreFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalSemaphoreFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_semaphore_capabilities
void imgui_VkExternalSemaphoreFeatureFlagsKHR(std::string const &label,
                                              VkExternalSemaphoreFeatureFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalSemaphoreFeatureFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkSemaphoreImportFlags(std::string const &label, VkSemaphoreImportFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreImportFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_semaphore
void imgui_VkSemaphoreImportFlagsKHR(std::string const &label,
                                     VkSemaphoreImportFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreImportFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalFenceHandleTypeFlags(std::string const &label,
                                          VkExternalFenceHandleTypeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalFenceHandleTypeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_fence_capabilities
void imgui_VkExternalFenceHandleTypeFlagsKHR(std::string const &label,
                                             VkExternalFenceHandleTypeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalFenceHandleTypeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkExternalFenceFeatureFlags(std::string const &label,
                                       VkExternalFenceFeatureFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalFenceFeatureFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_fence_capabilities
void imgui_VkExternalFenceFeatureFlagsKHR(std::string const &label,
                                          VkExternalFenceFeatureFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkExternalFenceFeatureFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkFenceImportFlags(std::string const &label, VkFenceImportFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkFenceImportFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_external_fence
void imgui_VkFenceImportFlagsKHR(std::string const &label, VkFenceImportFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkFenceImportFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_display_surface_counter
void imgui_VkSurfaceCounterFlagsEXT(std::string const &label,
                                    VkSurfaceCounterFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkSurfaceCounterFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_viewport_swizzle
void imgui_VkPipelineViewportSwizzleStateCreateFlagsNV(
    std::string const &label, VkPipelineViewportSwizzleStateCreateFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineViewportSwizzleStateCreateFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_discard_rectangles
void imgui_VkPipelineDiscardRectangleStateCreateFlagsEXT(
    std::string const &label, VkPipelineDiscardRectangleStateCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineDiscardRectangleStateCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_fragment_coverage_to_color
void imgui_VkPipelineCoverageToColorStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageToColorStateCreateFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCoverageToColorStateCreateFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_framebuffer_mixed_samples
void imgui_VkPipelineCoverageModulationStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageModulationStateCreateFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCoverageModulationStateCreateFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void imgui_VkPipelineCoverageReductionStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageReductionStateCreateFlagsNV const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCoverageReductionStateCreateFlagsNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_validation_cache
void imgui_VkValidationCacheCreateFlagsEXT(std::string const &label,
                                           VkValidationCacheCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkValidationCacheCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_debug_utils
void imgui_VkDebugUtilsMessageSeverityFlagsEXT(std::string const &label,
                                               VkDebugUtilsMessageSeverityFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugUtilsMessageSeverityFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_debug_utils
void imgui_VkDebugUtilsMessageTypeFlagsEXT(std::string const &label,
                                           VkDebugUtilsMessageTypeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugUtilsMessageTypeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_debug_utils
void imgui_VkDebugUtilsMessengerCreateFlagsEXT(std::string const &label,
                                               VkDebugUtilsMessengerCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugUtilsMessengerCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_debug_utils
void imgui_VkDebugUtilsMessengerCallbackDataFlagsEXT(
    std::string const &label, VkDebugUtilsMessengerCallbackDataFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugUtilsMessengerCallbackDataFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void imgui_VkDeviceMemoryReportFlagsEXT(std::string const &label,
                                        VkDeviceMemoryReportFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceMemoryReportFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_conservative_rasterization
void imgui_VkPipelineRasterizationConservativeStateCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationConservativeStateCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineRasterizationConservativeStateCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkDescriptorBindingFlags(std::string const &label,
                                    VkDescriptorBindingFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorBindingFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_descriptor_indexing
void imgui_VkDescriptorBindingFlagsEXT(std::string const &label,
                                       VkDescriptorBindingFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorBindingFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void imgui_VkConditionalRenderingFlagsEXT(std::string const &label,
                                          VkConditionalRenderingFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkConditionalRenderingFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkResolveModeFlags(std::string const &label, VkResolveModeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkResolveModeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
void imgui_VkResolveModeFlagsKHR(std::string const &label, VkResolveModeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkResolveModeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void imgui_VkPipelineRasterizationStateStreamCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationStateStreamCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineRasterizationStateStreamCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
void imgui_VkPipelineRasterizationDepthClipStateCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationDepthClipStateCreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineRasterizationDepthClipStateCreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
void imgui_VkSwapchainImageUsageFlagsANDROID(std::string const &label,
                                             VkSwapchainImageUsageFlagsANDROID const &data) {
    std::string serializedStr;
    vk_serialize("VkSwapchainImageUsageFlagsANDROID", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkToolPurposeFlags(std::string const &label, VkToolPurposeFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkToolPurposeFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
void imgui_VkToolPurposeFlagsEXT(std::string const &label, VkToolPurposeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkToolPurposeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204
void imgui_VkSubmitFlags(std::string const &label, VkSubmitFlags const &data) {
    std::string serializedStr;
    vk_serialize("VkSubmitFlags", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void imgui_VkSubmitFlagsKHR(std::string const &label, VkSubmitFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSubmitFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void imgui_VkImageFormatConstraintsFlagsFUCHSIA(std::string const &label,
                                                VkImageFormatConstraintsFlagsFUCHSIA const &data) {
    std::string serializedStr;
    vk_serialize("VkImageFormatConstraintsFlagsFUCHSIA", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void imgui_VkImageConstraintsInfoFlagsFUCHSIA(std::string const &label,
                                              VkImageConstraintsInfoFlagsFUCHSIA const &data) {
    std::string serializedStr;
    vk_serialize("VkImageConstraintsInfoFlagsFUCHSIA", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoCodecOperationFlagsKHR(std::string const &label,
                                         VkVideoCodecOperationFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoCodecOperationFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_KHR_video_queue
void imgui_VkVideoCapabilityFlagsKHR(std::string const &label,
                                     VkVideoCapabilityFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoCapabilityFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoSessionCreateFlagsKHR(std::string const &label,
                                        VkVideoSessionCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoSessionCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoBeginCodingFlagsKHR(std::string const &label,
                                      VkVideoBeginCodingFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoBeginCodingFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoEndCodingFlagsKHR(std::string const &label,
                                    VkVideoEndCodingFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEndCodingFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoCodingQualityPresetFlagsKHR(std::string const &label,
                                              VkVideoCodingQualityPresetFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoCodingQualityPresetFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoCodingControlFlagsKHR(std::string const &label,
                                        VkVideoCodingControlFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoCodingControlFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_KHR_video_decode_queue
void imgui_VkVideoDecodeCapabilityFlagsKHR(std::string const &label,
                                           VkVideoDecodeCapabilityFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeCapabilityFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
void imgui_VkVideoDecodeFlagsKHR(std::string const &label, VkVideoDecodeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_EXT_video_decode_h264
void imgui_VkVideoDecodeH264PictureLayoutFlagsEXT(
    std::string const &label, VkVideoDecodeH264PictureLayoutFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeH264PictureLayoutFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void imgui_VkVideoEncodeFlagsKHR(std::string const &label, VkVideoEncodeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_KHR_video_encode_queue
void imgui_VkVideoEncodeCapabilityFlagsKHR(std::string const &label,
                                           VkVideoEncodeCapabilityFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeCapabilityFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void imgui_VkVideoEncodeRateControlFlagsKHR(std::string const &label,
                                            VkVideoEncodeRateControlFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeRateControlFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void imgui_VkVideoEncodeRateControlModeFlagsKHR(std::string const &label,
                                                VkVideoEncodeRateControlModeFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeRateControlModeFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoChromaSubsamplingFlagsKHR(std::string const &label,
                                            VkVideoChromaSubsamplingFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoChromaSubsamplingFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkVideoComponentBitDepthFlagsKHR(std::string const &label,
                                            VkVideoComponentBitDepthFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoComponentBitDepthFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264CapabilityFlagsEXT(std::string const &label,
                                               VkVideoEncodeH264CapabilityFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264CapabilityFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264InputModeFlagsEXT(std::string const &label,
                                              VkVideoEncodeH264InputModeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264InputModeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264OutputModeFlagsEXT(std::string const &label,
                                               VkVideoEncodeH264OutputModeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264OutputModeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264RateControlStructureFlagsEXT(
    std::string const &label, VkVideoEncodeH264RateControlStructureFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264RateControlStructureFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265CapabilityFlagsEXT(std::string const &label,
                                               VkVideoEncodeH265CapabilityFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265CapabilityFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265InputModeFlagsEXT(std::string const &label,
                                              VkVideoEncodeH265InputModeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265InputModeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265OutputModeFlagsEXT(std::string const &label,
                                               VkVideoEncodeH265OutputModeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265OutputModeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265RateControlStructureFlagsEXT(
    std::string const &label, VkVideoEncodeH265RateControlStructureFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265RateControlStructureFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265CtbSizeFlagsEXT(std::string const &label,
                                            VkVideoEncodeH265CtbSizeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265CtbSizeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265TransformBlockSizeFlagsEXT(
    std::string const &label, VkVideoEncodeH265TransformBlockSizeFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265TransformBlockSizeFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkAttachmentLoadOp(std::string const &label, VkAttachmentLoadOp const &data) {
    std::string serializedStr;
    vk_serialize("VkAttachmentLoadOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkAttachmentStoreOp(std::string const &label, VkAttachmentStoreOp const &data) {
    std::string serializedStr;
    vk_serialize("VkAttachmentStoreOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBlendFactor(std::string const &label, VkBlendFactor const &data) {
    std::string serializedStr;
    vk_serialize("VkBlendFactor", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBlendOp(std::string const &label, VkBlendOp const &data) {
    std::string serializedStr;
    vk_serialize("VkBlendOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkBorderColor(std::string const &label, VkBorderColor const &data) {
    std::string serializedStr;
    vk_serialize("VkBorderColor", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineCacheHeaderVersion(std::string const &label,
                                        VkPipelineCacheHeaderVersion const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineCacheHeaderVersion", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkComponentSwizzle(std::string const &label, VkComponentSwizzle const &data) {
    std::string serializedStr;
    vk_serialize("VkComponentSwizzle", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCommandBufferLevel(std::string const &label, VkCommandBufferLevel const &data) {
    std::string serializedStr;
    vk_serialize("VkCommandBufferLevel", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkCompareOp(std::string const &label, VkCompareOp const &data) {
    std::string serializedStr;
    vk_serialize("VkCompareOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDescriptorType(std::string const &label, VkDescriptorType const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkDynamicState(std::string const &label, VkDynamicState const &data) {
    std::string serializedStr;
    vk_serialize("VkDynamicState", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPolygonMode(std::string const &label, VkPolygonMode const &data) {
    std::string serializedStr;
    vk_serialize("VkPolygonMode", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkFormat(std::string const &label, VkFormat const &data) {
    std::string serializedStr;
    vk_serialize("VkFormat", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkFrontFace(std::string const &label, VkFrontFace const &data) {
    std::string serializedStr;
    vk_serialize("VkFrontFace", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageLayout(std::string const &label, VkImageLayout const &data) {
    std::string serializedStr;
    vk_serialize("VkImageLayout", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageTiling(std::string const &label, VkImageTiling const &data) {
    std::string serializedStr;
    vk_serialize("VkImageTiling", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageType(std::string const &label, VkImageType const &data) {
    std::string serializedStr;
    vk_serialize("VkImageType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkImageViewType(std::string const &label, VkImageViewType const &data) {
    std::string serializedStr;
    vk_serialize("VkImageViewType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSharingMode(std::string const &label, VkSharingMode const &data) {
    std::string serializedStr;
    vk_serialize("VkSharingMode", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkIndexType(std::string const &label, VkIndexType const &data) {
    std::string serializedStr;
    vk_serialize("VkIndexType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkLogicOp(std::string const &label, VkLogicOp const &data) {
    std::string serializedStr;
    vk_serialize("VkLogicOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPhysicalDeviceType(std::string const &label, VkPhysicalDeviceType const &data) {
    std::string serializedStr;
    vk_serialize("VkPhysicalDeviceType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPipelineBindPoint(std::string const &label, VkPipelineBindPoint const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineBindPoint", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkPrimitiveTopology(std::string const &label, VkPrimitiveTopology const &data) {
    std::string serializedStr;
    vk_serialize("VkPrimitiveTopology", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkQueryType(std::string const &label, VkQueryType const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSubpassContents(std::string const &label, VkSubpassContents const &data) {
    std::string serializedStr;
    vk_serialize("VkSubpassContents", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkResult(std::string const &label, VkResult const &data) {
    std::string serializedStr;
    vk_serialize("VkResult", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkStencilOp(std::string const &label, VkStencilOp const &data) {
    std::string serializedStr;
    vk_serialize("VkStencilOp", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkStructureType(std::string const &label, VkStructureType const &data) {
    std::string serializedStr;
    vk_serialize("VkStructureType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSystemAllocationScope(std::string const &label, VkSystemAllocationScope const &data) {
    std::string serializedStr;
    vk_serialize("VkSystemAllocationScope", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkInternalAllocationType(std::string const &label,
                                    VkInternalAllocationType const &data) {
    std::string serializedStr;
    vk_serialize("VkInternalAllocationType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSamplerAddressMode(std::string const &label, VkSamplerAddressMode const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerAddressMode", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkFilter(std::string const &label, VkFilter const &data) {
    std::string serializedStr;
    vk_serialize("VkFilter", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkSamplerMipmapMode(std::string const &label, VkSamplerMipmapMode const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerMipmapMode", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkVertexInputRate(std::string const &label, VkVertexInputRate const &data) {
    std::string serializedStr;
    vk_serialize("VkVertexInputRate", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

void imgui_VkObjectType(std::string const &label, VkObjectType const &data) {
    std::string serializedStr;
    vk_serialize("VkObjectType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void imgui_VkIndirectCommandsTokenTypeNV(std::string const &label,
                                         VkIndirectCommandsTokenTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkIndirectCommandsTokenTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkDescriptorUpdateTemplateType(std::string const &label,
                                          VkDescriptorUpdateTemplateType const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorUpdateTemplateType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_descriptor_update_template
void imgui_VkDescriptorUpdateTemplateTypeKHR(std::string const &label,
                                             VkDescriptorUpdateTemplateTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDescriptorUpdateTemplateTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_viewport_swizzle
void imgui_VkViewportCoordinateSwizzleNV(std::string const &label,
                                         VkViewportCoordinateSwizzleNV const &data) {
    std::string serializedStr;
    vk_serialize("VkViewportCoordinateSwizzleNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_discard_rectangles
void imgui_VkDiscardRectangleModeEXT(std::string const &label,
                                     VkDiscardRectangleModeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDiscardRectangleModeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkPointClippingBehavior(std::string const &label, VkPointClippingBehavior const &data) {
    std::string serializedStr;
    vk_serialize("VkPointClippingBehavior", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_maintenance2
void imgui_VkPointClippingBehaviorKHR(std::string const &label,
                                      VkPointClippingBehaviorKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPointClippingBehaviorKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_NV_framebuffer_mixed_samples
void imgui_VkCoverageModulationModeNV(std::string const &label,
                                      VkCoverageModulationModeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkCoverageModulationModeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void imgui_VkCoverageReductionModeNV(std::string const &label,
                                     VkCoverageReductionModeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkCoverageReductionModeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_validation_cache
void imgui_VkValidationCacheHeaderVersionEXT(std::string const &label,
                                             VkValidationCacheHeaderVersionEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkValidationCacheHeaderVersionEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_AMD_shader_info
void imgui_VkShaderInfoTypeAMD(std::string const &label, VkShaderInfoTypeAMD const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderInfoTypeAMD", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
void imgui_VkQueueGlobalPriorityKHR(std::string const &label,
                                    VkQueueGlobalPriorityKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkQueueGlobalPriorityKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_global_priority
void imgui_VkQueueGlobalPriorityEXT(std::string const &label,
                                    VkQueueGlobalPriorityEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkQueueGlobalPriorityEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
void imgui_VkTimeDomainEXT(std::string const &label, VkTimeDomainEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkTimeDomainEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_conservative_rasterization
void imgui_VkConservativeRasterizationModeEXT(std::string const &label,
                                              VkConservativeRasterizationModeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkConservativeRasterizationModeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkSemaphoreType(std::string const &label, VkSemaphoreType const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreType", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
void imgui_VkSemaphoreTypeKHR(std::string const &label, VkSemaphoreTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSemaphoreTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void imgui_VkBuildAccelerationStructureModeKHR(std::string const &label,
                                               VkBuildAccelerationStructureModeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkBuildAccelerationStructureModeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkCopyAccelerationStructureModeKHR(std::string const &label,
                                              VkCopyAccelerationStructureModeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkCopyAccelerationStructureModeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkCopyAccelerationStructureModeNV(std::string const &label,
                                             VkCopyAccelerationStructureModeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkCopyAccelerationStructureModeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkAccelerationStructureTypeKHR(std::string const &label,
                                          VkAccelerationStructureTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkAccelerationStructureTypeNV(std::string const &label,
                                         VkAccelerationStructureTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkGeometryTypeKHR(std::string const &label, VkGeometryTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkGeometryTypeNV(std::string const &label, VkGeometryTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
void imgui_VkRayTracingShaderGroupTypeKHR(std::string const &label,
                                          VkRayTracingShaderGroupTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkRayTracingShaderGroupTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkRayTracingShaderGroupTypeNV(std::string const &label,
                                         VkRayTracingShaderGroupTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkRayTracingShaderGroupTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void imgui_VkAccelerationStructureMemoryRequirementsTypeNV(
    std::string const &label, VkAccelerationStructureMemoryRequirementsTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureMemoryRequirementsTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
void imgui_VkAccelerationStructureBuildTypeKHR(std::string const &label,
                                               VkAccelerationStructureBuildTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureBuildTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void imgui_VkAccelerationStructureCompatibilityKHR(
    std::string const &label, VkAccelerationStructureCompatibilityKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureCompatibilityKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
void imgui_VkShaderGroupShaderKHR(std::string const &label, VkShaderGroupShaderKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderGroupShaderKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
void imgui_VkMemoryOverallocationBehaviorAMD(std::string const &label,
                                             VkMemoryOverallocationBehaviorAMD const &data) {
    std::string serializedStr;
    vk_serialize("VkMemoryOverallocationBehaviorAMD", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void imgui_VkScopeNV(std::string const &label, VkScopeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkScopeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void imgui_VkComponentTypeNV(std::string const &label, VkComponentTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkComponentTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void imgui_VkPerformanceCounterScopeKHR(std::string const &label,
                                        VkPerformanceCounterScopeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceCounterScopeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void imgui_VkPerformanceCounterUnitKHR(std::string const &label,
                                       VkPerformanceCounterUnitKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceCounterUnitKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void imgui_VkPerformanceCounterStorageKHR(std::string const &label,
                                          VkPerformanceCounterStorageKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceCounterStorageKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void imgui_VkPerformanceConfigurationTypeINTEL(std::string const &label,
                                               VkPerformanceConfigurationTypeINTEL const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceConfigurationTypeINTEL", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void imgui_VkQueryPoolSamplingModeINTEL(std::string const &label,
                                        VkQueryPoolSamplingModeINTEL const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryPoolSamplingModeINTEL", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void imgui_VkPerformanceOverrideTypeINTEL(std::string const &label,
                                          VkPerformanceOverrideTypeINTEL const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceOverrideTypeINTEL", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void imgui_VkPerformanceParameterTypeINTEL(std::string const &label,
                                           VkPerformanceParameterTypeINTEL const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceParameterTypeINTEL", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void imgui_VkPerformanceValueTypeINTEL(std::string const &label,
                                       VkPerformanceValueTypeINTEL const &data) {
    std::string serializedStr;
    vk_serialize("VkPerformanceValueTypeINTEL", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void imgui_VkLineRasterizationModeEXT(std::string const &label,
                                      VkLineRasterizationModeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkLineRasterizationModeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void imgui_VkFragmentShadingRateNV(std::string const &label, VkFragmentShadingRateNV const &data) {
    std::string serializedStr;
    vk_serialize("VkFragmentShadingRateNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void imgui_VkFragmentShadingRateTypeNV(std::string const &label,
                                       VkFragmentShadingRateTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkFragmentShadingRateTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void imgui_VkProvokingVertexModeEXT(std::string const &label,
                                    VkProvokingVertexModeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkProvokingVertexModeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_surface
void imgui_VkColorSpaceKHR(std::string const &label, VkColorSpaceKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkColorSpaceKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_KHR_surface
void imgui_VkPresentModeKHR(std::string const &label, VkPresentModeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPresentModeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if (VK_EXT_debug_report || VK_EXT_debug_marker)
void imgui_VkDebugReportObjectTypeEXT(std::string const &label,
                                      VkDebugReportObjectTypeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDebugReportObjectTypeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void imgui_VkDeviceMemoryReportEventTypeEXT(std::string const &label,
                                            VkDeviceMemoryReportEventTypeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceMemoryReportEventTypeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_AMD_rasterization_order
void imgui_VkRasterizationOrderAMD(std::string const &label, VkRasterizationOrderAMD const &data) {
    std::string serializedStr;
    vk_serialize("VkRasterizationOrderAMD", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_validation_flags
void imgui_VkValidationCheckEXT(std::string const &label, VkValidationCheckEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkValidationCheckEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
void imgui_VkValidationFeatureEnableEXT(std::string const &label,
                                        VkValidationFeatureEnableEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkValidationFeatureEnableEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
void imgui_VkValidationFeatureDisableEXT(std::string const &label,
                                         VkValidationFeatureDisableEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkValidationFeatureDisableEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_display_control
void imgui_VkDisplayPowerStateEXT(std::string const &label, VkDisplayPowerStateEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDisplayPowerStateEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_display_control
void imgui_VkDeviceEventTypeEXT(std::string const &label, VkDeviceEventTypeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDeviceEventTypeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_display_control
void imgui_VkDisplayEventTypeEXT(std::string const &label, VkDisplayEventTypeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkDisplayEventTypeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkTessellationDomainOrigin(std::string const &label,
                                      VkTessellationDomainOrigin const &data) {
    std::string serializedStr;
    vk_serialize("VkTessellationDomainOrigin", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_maintenance2
void imgui_VkTessellationDomainOriginKHR(std::string const &label,
                                         VkTessellationDomainOriginKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkTessellationDomainOriginKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkSamplerYcbcrModelConversion(std::string const &label,
                                         VkSamplerYcbcrModelConversion const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerYcbcrModelConversion", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_sampler_ycbcr_conversion
void imgui_VkSamplerYcbcrModelConversionKHR(std::string const &label,
                                            VkSamplerYcbcrModelConversionKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerYcbcrModelConversionKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkSamplerYcbcrRange(std::string const &label, VkSamplerYcbcrRange const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerYcbcrRange", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_sampler_ycbcr_conversion
void imgui_VkSamplerYcbcrRangeKHR(std::string const &label, VkSamplerYcbcrRangeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerYcbcrRangeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

void imgui_VkChromaLocation(std::string const &label, VkChromaLocation const &data) {
    std::string serializedStr;
    vk_serialize("VkChromaLocation", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}

#if VK_KHR_sampler_ycbcr_conversion
void imgui_VkChromaLocationKHR(std::string const &label, VkChromaLocationKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkChromaLocationKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkSamplerReductionMode(std::string const &label, VkSamplerReductionMode const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerReductionMode", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_sampler_filter_minmax
void imgui_VkSamplerReductionModeEXT(std::string const &label,
                                     VkSamplerReductionModeEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkSamplerReductionModeEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_EXT_blend_operation_advanced
void imgui_VkBlendOverlapEXT(std::string const &label, VkBlendOverlapEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkBlendOverlapEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void imgui_VkFullScreenExclusiveEXT(std::string const &label,
                                    VkFullScreenExclusiveEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkFullScreenExclusiveEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkShaderFloatControlsIndependence(std::string const &label,
                                             VkShaderFloatControlsIndependence const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderFloatControlsIndependence", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_KHR_shader_float_controls
void imgui_VkShaderFloatControlsIndependenceKHR(std::string const &label,
                                                VkShaderFloatControlsIndependenceKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkShaderFloatControlsIndependenceKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void imgui_VkFragmentShadingRateCombinerOpKHR(std::string const &label,
                                              VkFragmentShadingRateCombinerOpKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkFragmentShadingRateCombinerOpKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 79
void imgui_VkVendorId(std::string const &label, VkVendorId const &data) {
    std::string serializedStr;
    vk_serialize("VkVendorId", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 131
void imgui_VkDriverId(std::string const &label, VkDriverId const &data) {
    std::string serializedStr;
    vk_serialize("VkDriverId", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
void imgui_VkDriverIdKHR(std::string const &label, VkDriverIdKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkDriverIdKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void imgui_VkShadingRatePaletteEntryNV(std::string const &label,
                                       VkShadingRatePaletteEntryNV const &data) {
    std::string serializedStr;
    vk_serialize("VkShadingRatePaletteEntryNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void imgui_VkCoarseSampleOrderTypeNV(std::string const &label,
                                     VkCoarseSampleOrderTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkCoarseSampleOrderTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void imgui_VkPipelineExecutableStatisticFormatKHR(
    std::string const &label, VkPipelineExecutableStatisticFormatKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkPipelineExecutableStatisticFormatKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void imgui_VkQueryResultStatusKHR(std::string const &label, VkQueryResultStatusKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkQueryResultStatusKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void imgui_VkAccelerationStructureMotionInstanceTypeNV(
    std::string const &label, VkAccelerationStructureMotionInstanceTypeNV const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureMotionInstanceTypeNV", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264
void imgui_VkVideoDecodeH264CreateFlagsEXT(std::string const &label,
                                           VkVideoDecodeH264CreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeH264CreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265
void imgui_VkVideoDecodeH265CreateFlagsEXT(std::string const &label,
                                           VkVideoDecodeH265CreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeH265CreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264CreateFlagsEXT(std::string const &label,
                                           VkVideoEncodeH264CreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264CreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265
void imgui_VkVideoEncodeH265CreateFlagsEXT(std::string const &label,
                                           VkVideoEncodeH265CreateFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH265CreateFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue
void imgui_VkVideoCapabilitiesFlagsKHR(std::string const &label,
                                       VkVideoCapabilitiesFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoCapabilitiesFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264
void imgui_VkVideoDecodeH264FieldLayoutFlagsEXT(std::string const &label,
                                                VkVideoDecodeH264FieldLayoutFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoDecodeH264FieldLayoutFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264
void imgui_VkVideoEncodeH264CapabilitiesFlagsEXT(
    std::string const &label, VkVideoEncodeH264CapabilitiesFlagsEXT const &data) {
    std::string serializedStr;
    vk_serialize("VkVideoEncodeH264CapabilitiesFlagsEXT", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void imgui_VkAccelerationStructureMemoryRequirementsTypeKHR(
    std::string const &label, VkAccelerationStructureMemoryRequirementsTypeKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureMemoryRequirementsTypeKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void imgui_VkIndirectCommandsLayoutUsageFlagsNVX(
    std::string const &label, VkIndirectCommandsLayoutUsageFlagsNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkIndirectCommandsLayoutUsageFlagsNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void imgui_VkObjectEntryUsageFlagsNVX(std::string const &label,
                                      VkObjectEntryUsageFlagsNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkObjectEntryUsageFlagsNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void imgui_VkIndirectCommandsTokenTypeNVX(std::string const &label,
                                          VkIndirectCommandsTokenTypeNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkIndirectCommandsTokenTypeNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void imgui_VkObjectEntryTypeNVX(std::string const &label, VkObjectEntryTypeNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkObjectEntryTypeNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void imgui_VkGeometryFlagsNVX(std::string const &label, VkGeometryFlagsNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryFlagsNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void imgui_VkGeometryInstanceFlagsNVX(std::string const &label,
                                      VkGeometryInstanceFlagsNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryInstanceFlagsNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void imgui_VkBuildAccelerationStructureFlagsNVX(std::string const &label,
                                                VkBuildAccelerationStructureFlagsNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkBuildAccelerationStructureFlagsNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
void imgui_VkMirSurfaceCreateFlagsKHR(std::string const &label,
                                      VkMirSurfaceCreateFlagsKHR const &data) {
    std::string serializedStr;
    vk_serialize("VkMirSurfaceCreateFlagsKHR", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void imgui_VkCopyAccelerationStructureModeNVX(std::string const &label,
                                              VkCopyAccelerationStructureModeNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkCopyAccelerationStructureModeNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90
void imgui_VkAccelerationStructureTypeNVX(std::string const &label,
                                          VkAccelerationStructureTypeNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkAccelerationStructureTypeNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void imgui_VkGeometryTypeNVX(std::string const &label, VkGeometryTypeNVX const &data) {
    std::string serializedStr;
    vk_serialize("VkGeometryTypeNVX", data, &serializedStr);
    ImGui::Text("%s: %s", label.c_str(), serializedStr.c_str());
}
#endif
