// Copyright (C) 2022 George Cave.
//
// SPDX-License-Identifier: Apache-2.0

// NOTE: This file was auto-generated by generate_struct_source.py

#include <foe/graphics/vk/imgui/vk_struct.hpp>

#include <foe/graphics/vk/imgui/vk_type.hpp>
#include <foe/imgui/plain_old_data.hpp>
#include <imgui.h>

void imgui_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const &data) {

    // uint32_t - binding
    imgui_pod<uint32_t>("binding", data.binding);

    // VkDescriptorType - descriptorType
    imgui_VkEnum("VkDescriptorType", "descriptorType", data.descriptorType);

    // uint32_t - descriptorCount
    imgui_pod<uint32_t>("descriptorCount", data.descriptorCount);

    // VkShaderStageFlags - stageFlags
    imgui_VkEnum("VkShaderStageFlags", "stageFlags", data.stageFlags);
}

void imgui_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const &data) {

    // VkDescriptorSetLayoutCreateFlags - flags
    imgui_VkEnum("VkDescriptorSetLayoutCreateFlags", "flags", data.flags);

    // VkDescriptorSetLayoutBinding - pBindings / bindingCount
    if (std::string nodeName = "pBindings:" + std::to_string(data.bindingCount);
        ImGui::TreeNode(nodeName.c_str())) {
        for (size_t i = 0; i < data.bindingCount; ++i) {
            auto const &it = data.pBindings[i];
            imgui_VkDescriptorSetLayoutBinding(it);
        }

        ImGui::TreePop();
    }
}

void imgui_VkVertexInputBindingDescription(VkVertexInputBindingDescription const &data) {

    // uint32_t - binding
    imgui_pod<uint32_t>("binding", data.binding);

    // uint32_t - stride
    imgui_pod<uint32_t>("stride", data.stride);

    // VkVertexInputRate - inputRate
    imgui_VkEnum("VkVertexInputRate", "inputRate", data.inputRate);
}

void imgui_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const &data) {

    // uint32_t - location
    imgui_pod<uint32_t>("location", data.location);

    // uint32_t - binding
    imgui_pod<uint32_t>("binding", data.binding);

    // VkFormat - format
    imgui_VkEnum("VkFormat", "format", data.format);

    // uint32_t - offset
    imgui_pod<uint32_t>("offset", data.offset);
}

void imgui_VkPipelineVertexInputStateCreateInfo(VkPipelineVertexInputStateCreateInfo const &data) {

    // VkPipelineVertexInputStateCreateFlags - flags
    imgui_VkEnum("VkPipelineVertexInputStateCreateFlags", "flags", data.flags);

    // VkVertexInputBindingDescription - pVertexBindingDescriptions / vertexBindingDescriptionCount
    if (std::string nodeName =
            "pVertexBindingDescriptions:" + std::to_string(data.vertexBindingDescriptionCount);
        ImGui::TreeNode(nodeName.c_str())) {
        for (size_t i = 0; i < data.vertexBindingDescriptionCount; ++i) {
            auto const &it = data.pVertexBindingDescriptions[i];
            imgui_VkVertexInputBindingDescription(it);
        }

        ImGui::TreePop();
    }

    // VkVertexInputAttributeDescription - pVertexAttributeDescriptions /
    // vertexAttributeDescriptionCount
    if (std::string nodeName =
            "pVertexAttributeDescriptions:" + std::to_string(data.vertexAttributeDescriptionCount);
        ImGui::TreeNode(nodeName.c_str())) {
        for (size_t i = 0; i < data.vertexAttributeDescriptionCount; ++i) {
            auto const &it = data.pVertexAttributeDescriptions[i];
            imgui_VkVertexInputAttributeDescription(it);
        }

        ImGui::TreePop();
    }
}

void imgui_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const &data) {

    // VkPipelineInputAssemblyStateCreateFlags - flags
    imgui_VkEnum("VkPipelineInputAssemblyStateCreateFlags", "flags", data.flags);

    // VkPrimitiveTopology - topology
    imgui_VkEnum("VkPrimitiveTopology", "topology", data.topology);

    // VkBool32 - primitiveRestartEnable
    imgui_VkBool32("primitiveRestartEnable", data.primitiveRestartEnable);
}

void imgui_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const &data) {

    // VkPipelineTessellationStateCreateFlags - flags
    imgui_VkEnum("VkPipelineTessellationStateCreateFlags", "flags", data.flags);

    // uint32_t - patchControlPoints
    imgui_pod<uint32_t>("patchControlPoints", data.patchControlPoints);
}

void imgui_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const &data) {

    // VkPipelineRasterizationStateCreateFlags - flags
    imgui_VkEnum("VkPipelineRasterizationStateCreateFlags", "flags", data.flags);

    // VkBool32 - depthClampEnable
    imgui_VkBool32("depthClampEnable", data.depthClampEnable);

    // VkBool32 - rasterizerDiscardEnable
    imgui_VkBool32("rasterizerDiscardEnable", data.rasterizerDiscardEnable);

    // VkPolygonMode - polygonMode
    imgui_VkEnum("VkPolygonMode", "polygonMode", data.polygonMode);

    // VkCullModeFlags - cullMode
    imgui_VkEnum("VkCullModeFlags", "cullMode", data.cullMode);

    // VkFrontFace - frontFace
    imgui_VkEnum("VkFrontFace", "frontFace", data.frontFace);

    // VkBool32 - depthBiasEnable
    imgui_VkBool32("depthBiasEnable", data.depthBiasEnable);

    // float - depthBiasConstantFactor
    imgui_pod<float>("depthBiasConstantFactor", data.depthBiasConstantFactor);

    // float - depthBiasClamp
    imgui_pod<float>("depthBiasClamp", data.depthBiasClamp);

    // float - depthBiasSlopeFactor
    imgui_pod<float>("depthBiasSlopeFactor", data.depthBiasSlopeFactor);

    // float - lineWidth
    imgui_pod<float>("lineWidth", data.lineWidth);
}

void imgui_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const &data) {

    // VkBool32 - blendEnable
    imgui_VkBool32("blendEnable", data.blendEnable);

    // VkBlendFactor - srcColorBlendFactor
    imgui_VkEnum("VkBlendFactor", "srcColorBlendFactor", data.srcColorBlendFactor);

    // VkBlendFactor - dstColorBlendFactor
    imgui_VkEnum("VkBlendFactor", "dstColorBlendFactor", data.dstColorBlendFactor);

    // VkBlendOp - colorBlendOp
    imgui_VkEnum("VkBlendOp", "colorBlendOp", data.colorBlendOp);

    // VkBlendFactor - srcAlphaBlendFactor
    imgui_VkEnum("VkBlendFactor", "srcAlphaBlendFactor", data.srcAlphaBlendFactor);

    // VkBlendFactor - dstAlphaBlendFactor
    imgui_VkEnum("VkBlendFactor", "dstAlphaBlendFactor", data.dstAlphaBlendFactor);

    // VkBlendOp - alphaBlendOp
    imgui_VkEnum("VkBlendOp", "alphaBlendOp", data.alphaBlendOp);

    // VkColorComponentFlags - colorWriteMask
    imgui_VkEnum("VkColorComponentFlags", "colorWriteMask", data.colorWriteMask);
}

void imgui_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const &data) {

    // VkPipelineColorBlendStateCreateFlags - flags
    imgui_VkEnum("VkPipelineColorBlendStateCreateFlags", "flags", data.flags);

    // VkBool32 - logicOpEnable
    imgui_VkBool32("logicOpEnable", data.logicOpEnable);

    // VkLogicOp - logicOp
    imgui_VkEnum("VkLogicOp", "logicOp", data.logicOp);

    // VkPipelineColorBlendAttachmentState - pAttachments / attachmentCount
    if (std::string nodeName = "pAttachments:" + std::to_string(data.attachmentCount);
        ImGui::TreeNode(nodeName.c_str())) {
        for (size_t i = 0; i < data.attachmentCount; ++i) {
            auto const &it = data.pAttachments[i];
            imgui_VkPipelineColorBlendAttachmentState(it);
        }

        ImGui::TreePop();
    }
}

void imgui_VkStencilOpState(VkStencilOpState const &data) {

    // VkStencilOp - failOp
    imgui_VkEnum("VkStencilOp", "failOp", data.failOp);

    // VkStencilOp - passOp
    imgui_VkEnum("VkStencilOp", "passOp", data.passOp);

    // VkStencilOp - depthFailOp
    imgui_VkEnum("VkStencilOp", "depthFailOp", data.depthFailOp);

    // VkCompareOp - compareOp
    imgui_VkEnum("VkCompareOp", "compareOp", data.compareOp);

    // uint32_t - compareMask
    imgui_pod<uint32_t>("compareMask", data.compareMask);

    // uint32_t - writeMask
    imgui_pod<uint32_t>("writeMask", data.writeMask);

    // uint32_t - reference
    imgui_pod<uint32_t>("reference", data.reference);
}

void imgui_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const &data) {

    // VkPipelineDepthStencilStateCreateFlags - flags
    imgui_VkEnum("VkPipelineDepthStencilStateCreateFlags", "flags", data.flags);

    // VkBool32 - depthTestEnable
    imgui_VkBool32("depthTestEnable", data.depthTestEnable);

    // VkBool32 - depthWriteEnable
    imgui_VkBool32("depthWriteEnable", data.depthWriteEnable);

    // VkCompareOp - depthCompareOp
    imgui_VkEnum("VkCompareOp", "depthCompareOp", data.depthCompareOp);

    // VkBool32 - depthBoundsTestEnable
    imgui_VkBool32("depthBoundsTestEnable", data.depthBoundsTestEnable);

    // VkBool32 - stencilTestEnable
    imgui_VkBool32("stencilTestEnable", data.stencilTestEnable);

    // VkStencilOpState - front
    if (ImGui::TreeNode("front")) {
        imgui_VkStencilOpState(data.front);
        ImGui::TreePop();
    }

    // VkStencilOpState - back
    if (ImGui::TreeNode("back")) {
        imgui_VkStencilOpState(data.back);
        ImGui::TreePop();
    }

    // float - minDepthBounds
    imgui_pod<float>("minDepthBounds", data.minDepthBounds);

    // float - maxDepthBounds
    imgui_pod<float>("maxDepthBounds", data.maxDepthBounds);
}

void imgui_VkPushConstantRange(VkPushConstantRange const &data) {

    // VkShaderStageFlags - stageFlags
    imgui_VkEnum("VkShaderStageFlags", "stageFlags", data.stageFlags);

    // uint32_t - offset
    imgui_pod<uint32_t>("offset", data.offset);

    // uint32_t - size
    imgui_pod<uint32_t>("size", data.size);
}
