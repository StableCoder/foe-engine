/*
    Copyright (C) 2022 George Cave.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

// NOTE: This file was auto-generated by generate_vk_imgui_code.py

#ifndef FOE_GRAPHICS_VK_IMGUI_DISPLAY_VK_ENUMS_HPP
#define FOE_GRAPHICS_VK_IMGUI_DISPLAY_VK_ENUMS_HPP

#include <foe/graphics/vk/imgui/export.h>
#include <vulkan/vulkan.h>

#include <string>

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFramebufferCreateFlags(std::string const &label,
                                                            VkFramebufferCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryPoolCreateFlags(std::string const &label,
                                                          VkQueryPoolCreateFlags const &data);

#if VK_QCOM_render_pass_transform
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRenderPassCreateFlags(std::string const &label,
                                                           VkRenderPassCreateFlags const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerCreateFlags(std::string const &label,
                                                        VkSamplerCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineLayoutCreateFlags(
    std::string const &label, VkPipelineLayoutCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCacheCreateFlags(
    std::string const &label, VkPipelineCacheCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineDepthStencilStateCreateFlags(
    std::string const &label, VkPipelineDepthStencilStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineDynamicStateCreateFlags(
    std::string const &label, VkPipelineDynamicStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineColorBlendStateCreateFlags(
    std::string const &label, VkPipelineColorBlendStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineMultisampleStateCreateFlags(
    std::string const &label, VkPipelineMultisampleStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineRasterizationStateCreateFlags(
    std::string const &label, VkPipelineRasterizationStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineViewportStateCreateFlags(
    std::string const &label, VkPipelineViewportStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineTessellationStateCreateFlags(
    std::string const &label, VkPipelineTessellationStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineInputAssemblyStateCreateFlags(
    std::string const &label, VkPipelineInputAssemblyStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineVertexInputStateCreateFlags(
    std::string const &label, VkPipelineVertexInputStateCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineShaderStageCreateFlags(
    std::string const &label, VkPipelineShaderStageCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorSetLayoutCreateFlags(
    std::string const &label, VkDescriptorSetLayoutCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBufferViewCreateFlags(std::string const &label,
                                                           VkBufferViewCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkInstanceCreateFlags(std::string const &label,
                                                         VkInstanceCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceCreateFlags(std::string const &label,
                                                       VkDeviceCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceQueueCreateFlags(std::string const &label,
                                                            VkDeviceQueueCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueueFlags(std::string const &label, VkQueueFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryPropertyFlags(std::string const &label,
                                                         VkMemoryPropertyFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryHeapFlags(std::string const &label,
                                                     VkMemoryHeapFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccessFlags(std::string const &label,
                                                 VkAccessFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBufferUsageFlags(std::string const &label,
                                                      VkBufferUsageFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBufferCreateFlags(std::string const &label,
                                                       VkBufferCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderStageFlags(std::string const &label,
                                                      VkShaderStageFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageUsageFlags(std::string const &label,
                                                     VkImageUsageFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageCreateFlags(std::string const &label,
                                                      VkImageCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageViewCreateFlags(std::string const &label,
                                                          VkImageViewCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCreateFlags(std::string const &label,
                                                         VkPipelineCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkColorComponentFlags(std::string const &label,
                                                         VkColorComponentFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFenceCreateFlags(std::string const &label,
                                                      VkFenceCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreCreateFlags(std::string const &label,
                                                          VkSemaphoreCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFormatFeatureFlags(std::string const &label,
                                                        VkFormatFeatureFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryControlFlags(std::string const &label,
                                                       VkQueryControlFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryResultFlags(std::string const &label,
                                                      VkQueryResultFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderModuleCreateFlags(std::string const &label,
                                                             VkShaderModuleCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkEventCreateFlags(std::string const &label,
                                                      VkEventCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandPoolCreateFlags(std::string const &label,
                                                            VkCommandPoolCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandPoolResetFlags(std::string const &label,
                                                           VkCommandPoolResetFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandBufferResetFlags(std::string const &label,
                                                             VkCommandBufferResetFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandBufferUsageFlags(std::string const &label,
                                                             VkCommandBufferUsageFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryPipelineStatisticFlags(
    std::string const &label, VkQueryPipelineStatisticFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryMapFlags(std::string const &label,
                                                    VkMemoryMapFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageAspectFlags(std::string const &label,
                                                      VkImageAspectFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSparseMemoryBindFlags(std::string const &label,
                                                           VkSparseMemoryBindFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSparseImageFormatFlags(std::string const &label,
                                                            VkSparseImageFormatFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSubpassDescriptionFlags(std::string const &label,
                                                             VkSubpassDescriptionFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineStageFlags(std::string const &label,
                                                        VkPipelineStageFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSampleCountFlags(std::string const &label,
                                                      VkSampleCountFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAttachmentDescriptionFlags(
    std::string const &label, VkAttachmentDescriptionFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkStencilFaceFlags(std::string const &label,
                                                      VkStencilFaceFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCullModeFlags(std::string const &label,
                                                   VkCullModeFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorPoolCreateFlags(
    std::string const &label, VkDescriptorPoolCreateFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorPoolResetFlags(
    std::string const &label, VkDescriptorPoolResetFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDependencyFlags(std::string const &label,
                                                     VkDependencyFlags const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSubgroupFeatureFlags(std::string const &label,
                                                          VkSubgroupFeatureFlags const &data);

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndirectCommandsLayoutUsageFlagsNV(
    std::string const &label, VkIndirectCommandsLayoutUsageFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndirectStateFlagsNV(std::string const &label,
                                                          VkIndirectStateFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryFlagsKHR(std::string const &label,
                                                      VkGeometryFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryFlagsNV(std::string const &label,
                                                     VkGeometryFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryInstanceFlagsKHR(
    std::string const &label, VkGeometryInstanceFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryInstanceFlagsNV(std::string const &label,
                                                             VkGeometryInstanceFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBuildAccelerationStructureFlagsKHR(
    std::string const &label, VkBuildAccelerationStructureFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBuildAccelerationStructureFlagsNV(
    std::string const &label, VkBuildAccelerationStructureFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPrivateDataSlotCreateFlags(
    std::string const &label, VkPrivateDataSlotCreateFlags const &data);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPrivateDataSlotCreateFlagsEXT(
    std::string const &label, VkPrivateDataSlotCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureCreateFlagsKHR(
    std::string const &label, VkAccelerationStructureCreateFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorUpdateTemplateCreateFlags(
    std::string const &label, VkDescriptorUpdateTemplateCreateFlags const &data);

#if VK_KHR_descriptor_update_template
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorUpdateTemplateCreateFlagsKHR(
    std::string const &label, VkDescriptorUpdateTemplateCreateFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCreationFeedbackFlags(
    std::string const &label, VkPipelineCreationFeedbackFlags const &data);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCreationFeedbackFlagsEXT(
    std::string const &label, VkPipelineCreationFeedbackFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceCounterDescriptionFlagsKHR(
    std::string const &label, VkPerformanceCounterDescriptionFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAcquireProfilingLockFlagsKHR(
    std::string const &label, VkAcquireProfilingLockFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreWaitFlags(std::string const &label,
                                                        VkSemaphoreWaitFlags const &data);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreWaitFlagsKHR(std::string const &label,
                                                           VkSemaphoreWaitFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCompilerControlFlagsAMD(
    std::string const &label, VkPipelineCompilerControlFlagsAMD const &data);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderCorePropertiesFlagsAMD(
    std::string const &label, VkShaderCorePropertiesFlagsAMD const &data);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceDiagnosticsConfigFlagsNV(
    std::string const &label, VkDeviceDiagnosticsConfigFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccessFlags2(std::string const &label,
                                                  VkAccessFlags2 const &data);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccessFlags2KHR(std::string const &label,
                                                     VkAccessFlags2KHR const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineStageFlags2(std::string const &label,
                                                         VkPipelineStageFlags2 const &data);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineStageFlags2KHR(std::string const &label,
                                                            VkPipelineStageFlags2KHR const &data);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureMotionInfoFlagsNV(
    std::string const &label, VkAccelerationStructureMotionInfoFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureMotionInstanceFlagsNV(
    std::string const &label, VkAccelerationStructureMotionInstanceFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFormatFeatureFlags2(std::string const &label,
                                                         VkFormatFeatureFlags2 const &data);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFormatFeatureFlags2KHR(std::string const &label,
                                                            VkFormatFeatureFlags2KHR const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRenderingFlags(std::string const &label,
                                                    VkRenderingFlags const &data);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRenderingFlagsKHR(std::string const &label,
                                                       VkRenderingFlagsKHR const &data);
#endif

#if VK_KHR_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCompositeAlphaFlagsKHR(std::string const &label,
                                                            VkCompositeAlphaFlagsKHR const &data);
#endif

#if VK_KHR_display
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDisplayPlaneAlphaFlagsKHR(
    std::string const &label, VkDisplayPlaneAlphaFlagsKHR const &data);
#endif

#if VK_KHR_display
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSurfaceTransformFlagsKHR(
    std::string const &label, VkSurfaceTransformFlagsKHR const &data);
#endif

#if VK_KHR_swapchain
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSwapchainCreateFlagsKHR(std::string const &label,
                                                             VkSwapchainCreateFlagsKHR const &data);
#endif

#if VK_KHR_display
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDisplayModeCreateFlagsKHR(
    std::string const &label, VkDisplayModeCreateFlagsKHR const &data);
#endif

#if VK_KHR_display
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDisplaySurfaceCreateFlagsKHR(
    std::string const &label, VkDisplaySurfaceCreateFlagsKHR const &data);
#endif

#if VK_KHR_android_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAndroidSurfaceCreateFlagsKHR(
    std::string const &label, VkAndroidSurfaceCreateFlagsKHR const &data);
#endif

#if VK_NN_vi_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkViSurfaceCreateFlagsNN(std::string const &label,
                                                            VkViSurfaceCreateFlagsNN const &data);
#endif

#if VK_KHR_wayland_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkWaylandSurfaceCreateFlagsKHR(
    std::string const &label, VkWaylandSurfaceCreateFlagsKHR const &data);
#endif

#if VK_KHR_win32_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkWin32SurfaceCreateFlagsKHR(
    std::string const &label, VkWin32SurfaceCreateFlagsKHR const &data);
#endif

#if VK_KHR_xlib_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkXlibSurfaceCreateFlagsKHR(
    std::string const &label, VkXlibSurfaceCreateFlagsKHR const &data);
#endif

#if VK_KHR_xcb_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkXcbSurfaceCreateFlagsKHR(
    std::string const &label, VkXcbSurfaceCreateFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDirectFBSurfaceCreateFlagsEXT(
    std::string const &label, VkDirectFBSurfaceCreateFlagsEXT const &data);
#endif

#if VK_MVK_ios_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIOSSurfaceCreateFlagsMVK(
    std::string const &label, VkIOSSurfaceCreateFlagsMVK const &data);
#endif

#if VK_MVK_macos_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMacOSSurfaceCreateFlagsMVK(
    std::string const &label, VkMacOSSurfaceCreateFlagsMVK const &data);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMetalSurfaceCreateFlagsEXT(
    std::string const &label, VkMetalSurfaceCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImagePipeSurfaceCreateFlagsFUCHSIA(
    std::string const &label, VkImagePipeSurfaceCreateFlagsFUCHSIA const &data);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkStreamDescriptorSurfaceCreateFlagsGGP(
    std::string const &label, VkStreamDescriptorSurfaceCreateFlagsGGP const &data);
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkHeadlessSurfaceCreateFlagsEXT(
    std::string const &label, VkHeadlessSurfaceCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkScreenSurfaceCreateFlagsQNX(
    std::string const &label, VkScreenSurfaceCreateFlagsQNX const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPeerMemoryFeatureFlags(std::string const &label,
                                                            VkPeerMemoryFeatureFlags const &data);

#if VK_KHR_device_group
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPeerMemoryFeatureFlagsKHR(
    std::string const &label, VkPeerMemoryFeatureFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryAllocateFlags(std::string const &label,
                                                         VkMemoryAllocateFlags const &data);

#if VK_KHR_device_group
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryAllocateFlagsKHR(std::string const &label,
                                                            VkMemoryAllocateFlagsKHR const &data);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceGroupPresentModeFlagsKHR(
    std::string const &label, VkDeviceGroupPresentModeFlagsKHR const &data);
#endif

#if VK_EXT_debug_report
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugReportFlagsEXT(std::string const &label,
                                                         VkDebugReportFlagsEXT const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandPoolTrimFlags(std::string const &label,
                                                          VkCommandPoolTrimFlags const &data);

#if VK_KHR_maintenance1
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandPoolTrimFlagsKHR(std::string const &label,
                                                             VkCommandPoolTrimFlagsKHR const &data);
#endif

#if VK_NV_external_memory_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryHandleTypeFlagsNV(
    std::string const &label, VkExternalMemoryHandleTypeFlagsNV const &data);
#endif

#if VK_NV_external_memory_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryFeatureFlagsNV(
    std::string const &label, VkExternalMemoryFeatureFlagsNV const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryHandleTypeFlags(
    std::string const &label, VkExternalMemoryHandleTypeFlags const &data);

#if (VK_KHR_external_memory_capabilities || VK_EXT_external_memory_host)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryHandleTypeFlagsKHR(
    std::string const &label, VkExternalMemoryHandleTypeFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryFeatureFlags(
    std::string const &label, VkExternalMemoryFeatureFlags const &data);

#if VK_KHR_external_memory_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalMemoryFeatureFlagsKHR(
    std::string const &label, VkExternalMemoryFeatureFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalSemaphoreHandleTypeFlags(
    std::string const &label, VkExternalSemaphoreHandleTypeFlags const &data);

#if VK_KHR_external_semaphore_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalSemaphoreHandleTypeFlagsKHR(
    std::string const &label, VkExternalSemaphoreHandleTypeFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalSemaphoreFeatureFlags(
    std::string const &label, VkExternalSemaphoreFeatureFlags const &data);

#if VK_KHR_external_semaphore_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalSemaphoreFeatureFlagsKHR(
    std::string const &label, VkExternalSemaphoreFeatureFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreImportFlags(std::string const &label,
                                                          VkSemaphoreImportFlags const &data);

#if VK_KHR_external_semaphore
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreImportFlagsKHR(std::string const &label,
                                                             VkSemaphoreImportFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalFenceHandleTypeFlags(
    std::string const &label, VkExternalFenceHandleTypeFlags const &data);

#if VK_KHR_external_fence_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalFenceHandleTypeFlagsKHR(
    std::string const &label, VkExternalFenceHandleTypeFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalFenceFeatureFlags(
    std::string const &label, VkExternalFenceFeatureFlags const &data);

#if VK_KHR_external_fence_capabilities
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkExternalFenceFeatureFlagsKHR(
    std::string const &label, VkExternalFenceFeatureFlagsKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFenceImportFlags(std::string const &label,
                                                      VkFenceImportFlags const &data);

#if VK_KHR_external_fence
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFenceImportFlagsKHR(std::string const &label,
                                                         VkFenceImportFlagsKHR const &data);
#endif

#if VK_EXT_display_surface_counter
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSurfaceCounterFlagsEXT(std::string const &label,
                                                            VkSurfaceCounterFlagsEXT const &data);
#endif

#if VK_NV_viewport_swizzle
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineViewportSwizzleStateCreateFlagsNV(
    std::string const &label, VkPipelineViewportSwizzleStateCreateFlagsNV const &data);
#endif

#if VK_EXT_discard_rectangles
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineDiscardRectangleStateCreateFlagsEXT(
    std::string const &label, VkPipelineDiscardRectangleStateCreateFlagsEXT const &data);
#endif

#if VK_NV_fragment_coverage_to_color
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCoverageToColorStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageToColorStateCreateFlagsNV const &data);
#endif

#if VK_NV_framebuffer_mixed_samples
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCoverageModulationStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageModulationStateCreateFlagsNV const &data);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCoverageReductionStateCreateFlagsNV(
    std::string const &label, VkPipelineCoverageReductionStateCreateFlagsNV const &data);
#endif

#if VK_EXT_validation_cache
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkValidationCacheCreateFlagsEXT(
    std::string const &label, VkValidationCacheCreateFlagsEXT const &data);
#endif

#if VK_EXT_debug_utils
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugUtilsMessageSeverityFlagsEXT(
    std::string const &label, VkDebugUtilsMessageSeverityFlagsEXT const &data);
#endif

#if VK_EXT_debug_utils
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugUtilsMessageTypeFlagsEXT(
    std::string const &label, VkDebugUtilsMessageTypeFlagsEXT const &data);
#endif

#if VK_EXT_debug_utils
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugUtilsMessengerCreateFlagsEXT(
    std::string const &label, VkDebugUtilsMessengerCreateFlagsEXT const &data);
#endif

#if VK_EXT_debug_utils
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugUtilsMessengerCallbackDataFlagsEXT(
    std::string const &label, VkDebugUtilsMessengerCallbackDataFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceMemoryReportFlagsEXT(
    std::string const &label, VkDeviceMemoryReportFlagsEXT const &data);
#endif

#if VK_EXT_conservative_rasterization
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineRasterizationConservativeStateCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationConservativeStateCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorBindingFlags(std::string const &label,
                                                            VkDescriptorBindingFlags const &data);
#endif

#if VK_EXT_descriptor_indexing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorBindingFlagsEXT(
    std::string const &label, VkDescriptorBindingFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkConditionalRenderingFlagsEXT(
    std::string const &label, VkConditionalRenderingFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkResolveModeFlags(std::string const &label,
                                                      VkResolveModeFlags const &data);
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkResolveModeFlagsKHR(std::string const &label,
                                                         VkResolveModeFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineRasterizationStateStreamCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationStateStreamCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineRasterizationDepthClipStateCreateFlagsEXT(
    std::string const &label, VkPipelineRasterizationDepthClipStateCreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSwapchainImageUsageFlagsANDROID(
    std::string const &label, VkSwapchainImageUsageFlagsANDROID const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkToolPurposeFlags(std::string const &label,
                                                      VkToolPurposeFlags const &data);
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkToolPurposeFlagsEXT(std::string const &label,
                                                         VkToolPurposeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 204
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSubmitFlags(std::string const &label,
                                                 VkSubmitFlags const &data);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSubmitFlagsKHR(std::string const &label,
                                                    VkSubmitFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageFormatConstraintsFlagsFUCHSIA(
    std::string const &label, VkImageFormatConstraintsFlagsFUCHSIA const &data);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageConstraintsInfoFlagsFUCHSIA(
    std::string const &label, VkImageConstraintsInfoFlagsFUCHSIA const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoCodecOperationFlagsKHR(
    std::string const &label, VkVideoCodecOperationFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 187 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoCapabilityFlagsKHR(std::string const &label,
                                                             VkVideoCapabilityFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoSessionCreateFlagsKHR(
    std::string const &label, VkVideoSessionCreateFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoBeginCodingFlagsKHR(
    std::string const &label, VkVideoBeginCodingFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEndCodingFlagsKHR(std::string const &label,
                                                            VkVideoEndCodingFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoCodingQualityPresetFlagsKHR(
    std::string const &label, VkVideoCodingQualityPresetFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoCodingControlFlagsKHR(
    std::string const &label, VkVideoCodingControlFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 207 && VK_KHR_video_decode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeCapabilityFlagsKHR(
    std::string const &label, VkVideoDecodeCapabilityFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeFlagsKHR(std::string const &label,
                                                         VkVideoDecodeFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 187 && VK_EXT_video_decode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeH264PictureLayoutFlagsEXT(
    std::string const &label, VkVideoDecodeH264PictureLayoutFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeFlagsKHR(std::string const &label,
                                                         VkVideoEncodeFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 206 && VK_KHR_video_encode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeCapabilityFlagsKHR(
    std::string const &label, VkVideoEncodeCapabilityFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeRateControlFlagsKHR(
    std::string const &label, VkVideoEncodeRateControlFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeRateControlModeFlagsKHR(
    std::string const &label, VkVideoEncodeRateControlModeFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoChromaSubsamplingFlagsKHR(
    std::string const &label, VkVideoChromaSubsamplingFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoComponentBitDepthFlagsKHR(
    std::string const &label, VkVideoComponentBitDepthFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 187 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264CapabilityFlagsEXT(
    std::string const &label, VkVideoEncodeH264CapabilityFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264InputModeFlagsEXT(
    std::string const &label, VkVideoEncodeH264InputModeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264OutputModeFlagsEXT(
    std::string const &label, VkVideoEncodeH264OutputModeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264RateControlStructureFlagsEXT(
    std::string const &label, VkVideoEncodeH264RateControlStructureFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265CapabilityFlagsEXT(
    std::string const &label, VkVideoEncodeH265CapabilityFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265InputModeFlagsEXT(
    std::string const &label, VkVideoEncodeH265InputModeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265OutputModeFlagsEXT(
    std::string const &label, VkVideoEncodeH265OutputModeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265RateControlStructureFlagsEXT(
    std::string const &label, VkVideoEncodeH265RateControlStructureFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265CtbSizeFlagsEXT(
    std::string const &label, VkVideoEncodeH265CtbSizeFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 206 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265TransformBlockSizeFlagsEXT(
    std::string const &label, VkVideoEncodeH265TransformBlockSizeFlagsEXT const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAttachmentLoadOp(std::string const &label,
                                                      VkAttachmentLoadOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAttachmentStoreOp(std::string const &label,
                                                       VkAttachmentStoreOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBlendFactor(std::string const &label,
                                                 VkBlendFactor const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBlendOp(std::string const &label, VkBlendOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBorderColor(std::string const &label,
                                                 VkBorderColor const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineCacheHeaderVersion(
    std::string const &label, VkPipelineCacheHeaderVersion const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkComponentSwizzle(std::string const &label,
                                                      VkComponentSwizzle const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCommandBufferLevel(std::string const &label,
                                                        VkCommandBufferLevel const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCompareOp(std::string const &label, VkCompareOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorType(std::string const &label,
                                                    VkDescriptorType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDynamicState(std::string const &label,
                                                  VkDynamicState const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPolygonMode(std::string const &label,
                                                 VkPolygonMode const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFormat(std::string const &label, VkFormat const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFrontFace(std::string const &label, VkFrontFace const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageLayout(std::string const &label,
                                                 VkImageLayout const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageTiling(std::string const &label,
                                                 VkImageTiling const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageType(std::string const &label, VkImageType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkImageViewType(std::string const &label,
                                                   VkImageViewType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSharingMode(std::string const &label,
                                                 VkSharingMode const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndexType(std::string const &label, VkIndexType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkLogicOp(std::string const &label, VkLogicOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPhysicalDeviceType(std::string const &label,
                                                        VkPhysicalDeviceType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineBindPoint(std::string const &label,
                                                       VkPipelineBindPoint const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPrimitiveTopology(std::string const &label,
                                                       VkPrimitiveTopology const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryType(std::string const &label, VkQueryType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSubpassContents(std::string const &label,
                                                     VkSubpassContents const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkResult(std::string const &label, VkResult const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkStencilOp(std::string const &label, VkStencilOp const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkStructureType(std::string const &label,
                                                   VkStructureType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSystemAllocationScope(std::string const &label,
                                                           VkSystemAllocationScope const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkInternalAllocationType(std::string const &label,
                                                            VkInternalAllocationType const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerAddressMode(std::string const &label,
                                                        VkSamplerAddressMode const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFilter(std::string const &label, VkFilter const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerMipmapMode(std::string const &label,
                                                       VkSamplerMipmapMode const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVertexInputRate(std::string const &label,
                                                     VkVertexInputRate const &data);

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkObjectType(std::string const &label, VkObjectType const &data);

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndirectCommandsTokenTypeNV(
    std::string const &label, VkIndirectCommandsTokenTypeNV const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorUpdateTemplateType(
    std::string const &label, VkDescriptorUpdateTemplateType const &data);

#if VK_KHR_descriptor_update_template
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDescriptorUpdateTemplateTypeKHR(
    std::string const &label, VkDescriptorUpdateTemplateTypeKHR const &data);
#endif

#if VK_NV_viewport_swizzle
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkViewportCoordinateSwizzleNV(
    std::string const &label, VkViewportCoordinateSwizzleNV const &data);
#endif

#if VK_EXT_discard_rectangles
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDiscardRectangleModeEXT(std::string const &label,
                                                             VkDiscardRectangleModeEXT const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPointClippingBehavior(std::string const &label,
                                                           VkPointClippingBehavior const &data);

#if VK_KHR_maintenance2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPointClippingBehaviorKHR(
    std::string const &label, VkPointClippingBehaviorKHR const &data);
#endif

#if VK_NV_framebuffer_mixed_samples
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCoverageModulationModeNV(
    std::string const &label, VkCoverageModulationModeNV const &data);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCoverageReductionModeNV(std::string const &label,
                                                             VkCoverageReductionModeNV const &data);
#endif

#if VK_EXT_validation_cache
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkValidationCacheHeaderVersionEXT(
    std::string const &label, VkValidationCacheHeaderVersionEXT const &data);
#endif

#if VK_AMD_shader_info
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderInfoTypeAMD(std::string const &label,
                                                       VkShaderInfoTypeAMD const &data);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueueGlobalPriorityKHR(std::string const &label,
                                                            VkQueueGlobalPriorityKHR const &data);
#endif

#if VK_EXT_global_priority
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueueGlobalPriorityEXT(std::string const &label,
                                                            VkQueueGlobalPriorityEXT const &data);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkTimeDomainEXT(std::string const &label,
                                                   VkTimeDomainEXT const &data);
#endif

#if VK_EXT_conservative_rasterization
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkConservativeRasterizationModeEXT(
    std::string const &label, VkConservativeRasterizationModeEXT const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreType(std::string const &label,
                                                   VkSemaphoreType const &data);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSemaphoreTypeKHR(std::string const &label,
                                                      VkSemaphoreTypeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBuildAccelerationStructureModeKHR(
    std::string const &label, VkBuildAccelerationStructureModeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCopyAccelerationStructureModeKHR(
    std::string const &label, VkCopyAccelerationStructureModeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCopyAccelerationStructureModeNV(
    std::string const &label, VkCopyAccelerationStructureModeNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureTypeKHR(
    std::string const &label, VkAccelerationStructureTypeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureTypeNV(
    std::string const &label, VkAccelerationStructureTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryTypeKHR(std::string const &label,
                                                     VkGeometryTypeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryTypeNV(std::string const &label,
                                                    VkGeometryTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRayTracingShaderGroupTypeKHR(
    std::string const &label, VkRayTracingShaderGroupTypeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRayTracingShaderGroupTypeNV(
    std::string const &label, VkRayTracingShaderGroupTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureMemoryRequirementsTypeNV(
    std::string const &label, VkAccelerationStructureMemoryRequirementsTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureBuildTypeKHR(
    std::string const &label, VkAccelerationStructureBuildTypeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureCompatibilityKHR(
    std::string const &label, VkAccelerationStructureCompatibilityKHR const &data);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderGroupShaderKHR(std::string const &label,
                                                          VkShaderGroupShaderKHR const &data);
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMemoryOverallocationBehaviorAMD(
    std::string const &label, VkMemoryOverallocationBehaviorAMD const &data);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkScopeNV(std::string const &label, VkScopeNV const &data);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkComponentTypeNV(std::string const &label,
                                                     VkComponentTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceCounterScopeKHR(
    std::string const &label, VkPerformanceCounterScopeKHR const &data);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceCounterUnitKHR(
    std::string const &label, VkPerformanceCounterUnitKHR const &data);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceCounterStorageKHR(
    std::string const &label, VkPerformanceCounterStorageKHR const &data);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceConfigurationTypeINTEL(
    std::string const &label, VkPerformanceConfigurationTypeINTEL const &data);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryPoolSamplingModeINTEL(
    std::string const &label, VkQueryPoolSamplingModeINTEL const &data);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceOverrideTypeINTEL(
    std::string const &label, VkPerformanceOverrideTypeINTEL const &data);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceParameterTypeINTEL(
    std::string const &label, VkPerformanceParameterTypeINTEL const &data);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPerformanceValueTypeINTEL(
    std::string const &label, VkPerformanceValueTypeINTEL const &data);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkLineRasterizationModeEXT(
    std::string const &label, VkLineRasterizationModeEXT const &data);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFragmentShadingRateNV(std::string const &label,
                                                           VkFragmentShadingRateNV const &data);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFragmentShadingRateTypeNV(
    std::string const &label, VkFragmentShadingRateTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkProvokingVertexModeEXT(std::string const &label,
                                                            VkProvokingVertexModeEXT const &data);
#endif

#if VK_KHR_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkColorSpaceKHR(std::string const &label,
                                                   VkColorSpaceKHR const &data);
#endif

#if VK_KHR_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPresentModeKHR(std::string const &label,
                                                    VkPresentModeKHR const &data);
#endif

#if (VK_EXT_debug_report || VK_EXT_debug_marker)
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDebugReportObjectTypeEXT(
    std::string const &label, VkDebugReportObjectTypeEXT const &data);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceMemoryReportEventTypeEXT(
    std::string const &label, VkDeviceMemoryReportEventTypeEXT const &data);
#endif

#if VK_AMD_rasterization_order
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkRasterizationOrderAMD(std::string const &label,
                                                           VkRasterizationOrderAMD const &data);
#endif

#if VK_EXT_validation_flags
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkValidationCheckEXT(std::string const &label,
                                                        VkValidationCheckEXT const &data);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkValidationFeatureEnableEXT(
    std::string const &label, VkValidationFeatureEnableEXT const &data);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkValidationFeatureDisableEXT(
    std::string const &label, VkValidationFeatureDisableEXT const &data);
#endif

#if VK_EXT_display_control
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDisplayPowerStateEXT(std::string const &label,
                                                          VkDisplayPowerStateEXT const &data);
#endif

#if VK_EXT_display_control
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDeviceEventTypeEXT(std::string const &label,
                                                        VkDeviceEventTypeEXT const &data);
#endif

#if VK_EXT_display_control
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDisplayEventTypeEXT(std::string const &label,
                                                         VkDisplayEventTypeEXT const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkTessellationDomainOrigin(
    std::string const &label, VkTessellationDomainOrigin const &data);

#if VK_KHR_maintenance2
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkTessellationDomainOriginKHR(
    std::string const &label, VkTessellationDomainOriginKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerYcbcrModelConversion(
    std::string const &label, VkSamplerYcbcrModelConversion const &data);

#if VK_KHR_sampler_ycbcr_conversion
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerYcbcrModelConversionKHR(
    std::string const &label, VkSamplerYcbcrModelConversionKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerYcbcrRange(std::string const &label,
                                                       VkSamplerYcbcrRange const &data);

#if VK_KHR_sampler_ycbcr_conversion
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerYcbcrRangeKHR(std::string const &label,
                                                          VkSamplerYcbcrRangeKHR const &data);
#endif

FOE_GFX_VK_IMGUI_EXPORT void imgui_VkChromaLocation(std::string const &label,
                                                    VkChromaLocation const &data);

#if VK_KHR_sampler_ycbcr_conversion
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkChromaLocationKHR(std::string const &label,
                                                       VkChromaLocationKHR const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerReductionMode(std::string const &label,
                                                          VkSamplerReductionMode const &data);
#endif

#if VK_EXT_sampler_filter_minmax
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkSamplerReductionModeEXT(std::string const &label,
                                                             VkSamplerReductionModeEXT const &data);
#endif

#if VK_EXT_blend_operation_advanced
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBlendOverlapEXT(std::string const &label,
                                                     VkBlendOverlapEXT const &data);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFullScreenExclusiveEXT(std::string const &label,
                                                            VkFullScreenExclusiveEXT const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderFloatControlsIndependence(
    std::string const &label, VkShaderFloatControlsIndependence const &data);
#endif

#if VK_HEADER_VERSION >= 116 && VK_KHR_shader_float_controls
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShaderFloatControlsIndependenceKHR(
    std::string const &label, VkShaderFloatControlsIndependenceKHR const &data);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkFragmentShadingRateCombinerOpKHR(
    std::string const &label, VkFragmentShadingRateCombinerOpKHR const &data);
#endif

#if VK_HEADER_VERSION >= 79
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVendorId(std::string const &label, VkVendorId const &data);
#endif

#if VK_HEADER_VERSION >= 131
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDriverId(std::string const &label, VkDriverId const &data);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkDriverIdKHR(std::string const &label,
                                                 VkDriverIdKHR const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkShadingRatePaletteEntryNV(
    std::string const &label, VkShadingRatePaletteEntryNV const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCoarseSampleOrderTypeNV(std::string const &label,
                                                             VkCoarseSampleOrderTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkPipelineExecutableStatisticFormatKHR(
    std::string const &label, VkPipelineExecutableStatisticFormatKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkQueryResultStatusKHR(std::string const &label,
                                                          VkQueryResultStatusKHR const &data);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureMotionInstanceTypeNV(
    std::string const &label, VkAccelerationStructureMotionInstanceTypeNV const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeH264CreateFlagsEXT(
    std::string const &label, VkVideoDecodeH264CreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeH265CreateFlagsEXT(
    std::string const &label, VkVideoDecodeH265CreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264CreateFlagsEXT(
    std::string const &label, VkVideoEncodeH264CreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH265CreateFlagsEXT(
    std::string const &label, VkVideoEncodeH265CreateFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoCapabilitiesFlagsKHR(
    std::string const &label, VkVideoCapabilitiesFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoDecodeH264FieldLayoutFlagsEXT(
    std::string const &label, VkVideoDecodeH264FieldLayoutFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkVideoEncodeH264CapabilitiesFlagsEXT(
    std::string const &label, VkVideoEncodeH264CapabilitiesFlagsEXT const &data);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureMemoryRequirementsTypeKHR(
    std::string const &label, VkAccelerationStructureMemoryRequirementsTypeKHR const &data);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndirectCommandsLayoutUsageFlagsNVX(
    std::string const &label, VkIndirectCommandsLayoutUsageFlagsNVX const &data);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkObjectEntryUsageFlagsNVX(
    std::string const &label, VkObjectEntryUsageFlagsNVX const &data);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkIndirectCommandsTokenTypeNVX(
    std::string const &label, VkIndirectCommandsTokenTypeNVX const &data);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkObjectEntryTypeNVX(std::string const &label,
                                                        VkObjectEntryTypeNVX const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryFlagsNVX(std::string const &label,
                                                      VkGeometryFlagsNVX const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryInstanceFlagsNVX(
    std::string const &label, VkGeometryInstanceFlagsNVX const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkBuildAccelerationStructureFlagsNVX(
    std::string const &label, VkBuildAccelerationStructureFlagsNVX const &data);
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkMirSurfaceCreateFlagsKHR(
    std::string const &label, VkMirSurfaceCreateFlagsKHR const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkCopyAccelerationStructureModeNVX(
    std::string const &label, VkCopyAccelerationStructureModeNVX const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkAccelerationStructureTypeNVX(
    std::string const &label, VkAccelerationStructureTypeNVX const &data);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
FOE_GFX_VK_IMGUI_EXPORT void imgui_VkGeometryTypeNVX(std::string const &label,
                                                     VkGeometryTypeNVX const &data);
#endif

#endif // FOE_GRAPHICS_VK_IMGUI_DISPLAY_VK_ENUMS_HPP
