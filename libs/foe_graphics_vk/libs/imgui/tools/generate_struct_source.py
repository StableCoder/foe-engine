#!/usr/bin/env python3

import os
import sys
import getopt
import xml.etree.ElementTree as ET
import yaml
import datetime


def guardItem(item, firstVersion, lastVersion, outFile):
    guarded = False
    # Guard check for first version
    if item.get('first') != firstVersion:
        guarded = True
        outFile.writelines(
            ['#if VK_HEADER_VERSION >= ', item.get('first')])
    # Guard check for last version
    if item.get('last') != lastVersion:
        if guarded:
            # If already started, append to it
            outFile.writelines(
                [' && VK_HEADER_VERSION <= ', item.get('last')])
        else:
            guarded = True
            outFile.writelines(
                ['#if VK_HEADER_VERSION <= ', item.get('last')])
    # Guard check for platforms
    platforms = item.findall('platforms/')
    if platforms:
        if guarded:
            # If already started, append to it
            outFile.write(' && ')
        else:
            guarded = True
            outFile.write('\n#if ')

        if len(platforms) > 1:
            outFile.write('(')
        platformed = False
        for platform in platforms:
            if platformed:
                outFile.write(' || {}'.format(platform.tag))
            else:
                platformed = True
                outFile.write(platform.tag)
        if len(platforms) > 1:
            outFile.write(')')

    if guarded:
        outFile.write('\n')
    return guarded


def main(argv):
    xmlFile = ''
    yamlFile = ''
    header = False

    try:
        opts, args = getopt.getopt(argv, 'x:y:', [])
    except getopt.GetoptError:
        print('Error parsing options')
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-x':
            xmlFile = arg
        elif opt == '-y':
            yamlFile = arg

    if xmlFile == '':
        print("Error: No Vulkan XML file specified")
        sys.exit(1)
    if yamlFile == '':
        print("Error: No input Yaml file specified")
        sys.exit(1)

    try:
        xmlData = ET.parse(xmlFile)
        xmlRoot = xmlData.getroot()
    except:
        print("Error: Could not open XML file: ", xmlFile)
        sys.exit(1)

    try:
        with open(yamlFile, 'r') as file:
            yamlData = yaml.safe_load(file)
    except:
        print("Error: Could not open Yaml file: ", yamlFile)
        sys.exit(1)

    # Get first/last versions
    firstVersion = xmlRoot.get('first')
    lastVersion = xmlRoot.get('last')

    # Copyright
    year = datetime.date.today().year
    if year != 2022:
        year = '2022-{}'.format(year)

    copyright = """/*
    Copyright (C) {0} George Cave.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

// NOTE: This file was auto-generated by generate_struct_source.py
""".format(year)

    # Struct Processing
    headerFile = open(
        '../include/foe/graphics/vk/imgui/vk_struct.hpp', 'w')
    sourceFile = open('../src/vk_struct.cpp', 'w')

    headerFile.write("""{0}

#ifndef FOE_GRAPHICS_VK_IMGUI_VK_STRUCT_HPP
#define FOE_GRAPHICS_VK_IMGUI_VK_STRUCT_HPP

#include <foe/graphics/vk/imgui/export.h>
#include <vulkan/vulkan.h>

#include <string>
""".format(copyright))

    sourceFile.write("""{}

#include <foe/graphics/vk/imgui/vk_struct.hpp>

#include <foe/graphics/vk/imgui/vk_type.hpp>
#include <foe/imgui/plain_old_data.hpp>
#include <imgui.h>
""".format(copyright))

    for struct in xmlRoot.findall('structs/'):
        structName = struct.tag
        if not structName in yamlData:
            continue

        headerFile.write('\n')
        sourceFile.write('\n')

        # Header
        headerFile.write("""FOE_GFX_VK_IMGUI_EXPORT void imgui_{0}({0} const &data);
""".format(structName))

        # Source
        sourceFile.write("""void imgui_{0}({0} const &data) {{
""".format(structName))

        excludedMembers = []
        if yamlData[structName] and 'exclude' in yamlData[structName]:
            excludedMembers = yamlData[structName]['exclude']

        for member in struct.findall('members/'):
            memberName = member.tag
            memberType = member.find('type').text
            memberTypeSuffix = member.find('type').get('suffix')

            if memberName in excludedMembers:
                continue
            if memberName == 'pNext':
                continue
            if memberName == 'sType' and memberType == 'VkStructureType':
                continue

            if memberTypeSuffix and '*' in memberTypeSuffix and member.get('len'):
                # Some variable array type
                formattedName = memberName[1::]
                formattedName = formattedName[0].lower() + formattedName[1::]
                countMember = member.get('len')

                fnCall = 'imgui_{0}("", it);'.format(memberType)
                if xmlRoot.findall('structs/{}/'.format(memberType)):
                    fnCall = 'imgui_{0}(it);'.format(memberType)

                sourceFile.write("""
    // {0} - {1} / {2}
    if(std::string nodeName = "{1}:" + std::to_string(data.{2});
        ImGui::TreeNode(nodeName.c_str())) {{
        for (size_t i = 0; i < data.{2}; ++i) {{
            auto const& it = data.{1}[i];
            {3}
        }}

        ImGui::TreePop();
    }}
""".format(memberType, memberName, countMember, fnCall))

            elif xmlRoot.findall('structs/{}/'.format(memberType)):
                sourceFile.write("""
    // {0} - {1}
    if(ImGui::TreeNode("{1}")) {{
        imgui_{0}(data.{1});
        ImGui::TreePop();
    }}
""".format(memberType, memberName))

            elif xmlRoot.find('enums/{}'.format(memberType)):
                sourceFile.write("""
    // {0} - {1}
    imgui_VkEnum("{0}", "{1}", data.{1});
""".format(memberType, memberName))

            elif 'Vk' in memberType:
                sourceFile.write("""
    // {0} - {1}
    imgui_{0}("{1}", data.{1});
""".format(memberType, memberName))

            else:
                sourceFile.write("""
    // {0} - {1}
    imgui_pod<{0}>("{1}", data.{1});
""".format(memberType, memberName))

        # Finish up the function definitions
        sourceFile.write("""
}}
""".format(structName))

    headerFile.write(
        '\n#endif // FOE_GRAPHICS_VK_IMGUI_DISPLAY_VK_STRUCTS_HPP')


if __name__ == "__main__":
    main(sys.argv[1:])
