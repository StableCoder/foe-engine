// Copyright (C) 2022 George Cave.
//
// SPDX-License-Identifier: Apache-2.0

#include <catch.hpp>
#include <foe/imex/yaml/result.h>

#define ERROR_CODE_CATCH_CHECK(X)                                                                  \
    SECTION(#X) {                                                                                  \
        foeImexYamlResultToString(X, resultString);                                                \
        CHECK(std::string_view{resultString} == #X);                                               \
    }

TEST_CASE("foeImexYamlResult - Ensure error codes return correct values and strings") {
    char resultString[FOE_MAX_RESULT_STRING_SIZE];

    SECTION("Generic non-existant negative value") {
        foeImexYamlResultToString((foeImexYamlResult)FOE_RESULT_MIN_ENUM, resultString);
        CHECK(std::string_view{resultString} == "FOE_IMEX_YAML_UNKNOWN_ERROR_2147483647");
    }
    SECTION("Generic non-existant positive value") {
        foeImexYamlResultToString((foeImexYamlResult)FOE_RESULT_MAX_ENUM, resultString);
        CHECK(std::string_view{resultString} == "FOE_IMEX_YAML_UNKNOWN_SUCCESS_2147483647");
    }

    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_SUCCESS)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_INCOMPLETE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_OUT_OF_MEMORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FUNCTIONALITY_ALREADY_REGISTERED)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FUNCTIONALITY_NOT_REGISTERED)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_FIND_RESOURCE_IMPORTER)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_IMPORT_RESOURCE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_FIND_COMPONENT_IMPORTER)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_IMPORT_COMPONENT)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_PATH_NOT_DIRECTORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_DEPENDENCIES_FILE_NOT_EXIST)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_DEPENDENCIES_FILE_NOT_REGULAR_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_READ_DEPENDENCIES)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_RESOURCE_INDEX_FILE_NOT_EXIST)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_RESOURCE_INDEX_FILE_NOT_REGULAR_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_ENTITY_INDEX_FILE_NOT_EXIST)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_ENTITY_INDEX_FILE_NOT_REGULAR_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_ENTITY_DIRECTORY_NOT_EXIST)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_ENTITY_FILE_NOT_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_OPEN_ENTITY_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_RESOURCE_DIRECTORY_NOT_EXIST)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_RESOURCE_DIRECTORY_NOT_DIRECTORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_RESOURCE_FILE_NOT_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_OPEN_RESOURCE_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_ENTITY_DIRECTORY_NOT_DIRECTORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_EXTERNAL_DIRECTORY_NOT_DIRECTORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_OPEN_FILE)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_READ_DATA)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_EXPORTER_ALREADY_REGISTERED)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_EXPORTER_NOT_REGISTERED)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_DESTINATION_NOT_DIRECTORY)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_PERFORM_FILESYSTEM_OPERATION)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_WRITE_DEPENDENCIES)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_WRITE_RESOURCE_INDEX_DATA)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_WRITE_COMPONENT_INDEX_DATA)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_WRITE_RESOURCE_DATA)
    ERROR_CODE_CATCH_CHECK(FOE_IMEX_YAML_ERROR_FAILED_TO_WRITE_COMPONENT_DATA)
}
