# Global

stages:
 - Formatting
 - Linux Builds
 - Windows Builds
 - macOS Builds
 - Vulkan Testing
 - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CTEST_OUTPUT_ON_FAILURE: 1

# Formatting Jobs
Source Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
    - container
    - linux
    - amd64
  script:
    - cmake . -B build -G Ninja
    - ninja -C build format
    - git diff --exit-code

CMake Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
    - container
    - linux
    - amd64
  script:
    - cmake . -B build -G Ninja
    - ninja -C build cmake-format
    - git diff --exit-code

Shell Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
  - container
  - linux
  - amd64
  script:
    - for FILE in $(find . | grep -e "\.sh$"); do echo ">> For File - $FILE"; shfmt -i 4 $FILE > $FILE.tmp; mv $FILE.tmp $FILE; chmod +x $FILE; done
    - git submodule foreach --recursive git reset --hard
    - git diff --exit-code

Python Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
  - container
  - linux
  - amd64
  script:
    - for FILE in $(find . | grep -e "\.py$"); do echo ">> For File - $FILE"; autopep8 -i $FILE; done
    - git submodule foreach --recursive git reset --hard
    - git diff --exit-code

# Platform Stage Templates

.linux_template: &linux_template
  stage: Linux Builds
  needs: []
  dependencies: []
  script:
    - cmake . -B build -G Ninja -D BUILD_TESTS=ON -D BUILD_EXTRAS=ON -D CMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build test
    - cmake . -B build -D LINKTIME_PLUGINS=ON
    - ninja -C build

.platform_macos_template: &platform_macos_template
  stage: macOS Builds
  needs: []
  dependencies: []
  script:
    - cmake . -B build -G Ninja -D BUILD_TESTS=ON -D BUILD_EXTRAS=ON -D CMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build test
    - cmake . -B build -D LINKTIME_PLUGINS=ON
    - ninja -C build

.platform_windows_template: &platform_windows_template
  stage: Windows Builds
  image: docker.io/stabletec/build-foe:windows
  tags:
    - container
    - windows
    - amd64
  needs: []
  dependencies: []
  retry: 2
  script:
    - cmake . -B build -G Ninja -D BUILD_TESTS=ON -D BUILD_EXTRAS=ON -D CMAKE_BUILD_TYPE="$env:BUILD_TYPE" $env:CMAKE_OPTIONS
    - ninja -C build
    - ninja -C build test
    - cmake . -B build -D LINKTIME_PLUGINS=ON
    - ninja -C build

# Arch

Arch/GCC Static:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release, Debug]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  <<: *linux_template

Arch/GCC Shared:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release, Debug]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *linux_template

Arch/Clang Static:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release, Debug]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_template

Arch/Clang Shared:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release, Debug]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *linux_template

# Fedora

Fedora/GCC Static:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  <<: *linux_template

Fedora/GCC Shared:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *linux_template

Fedora/Clang Static:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_template

Fedora/Clang Shared:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *linux_template

# Ubuntu

Ubuntu/GCC Static:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, riscv64]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -D XR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/GCC Shared:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, riscv64]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON -D XR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/Clang Static:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, riscv64]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D XR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/Clang Shared:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le, riscv64]
      BUILD_TYPE: [Release]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON -D XR_SUPPORT=OFF
  <<: *linux_template

# macOS

macOS/Clang Static:
  parallel:
    matrix:
    - ARCH: [amd64, arm64]
      BUILD_TYPE: [Release, Debug]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_macos_template

macOS/Clang Shared:
  parallel:
    matrix:
    - ARCH: [amd64, arm64]
      BUILD_TYPE: [Release, Debug]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *platform_macos_template

# Windows

Windows/MSVC Static:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
  <<: *platform_windows_template

Windows/MSVC Shared:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

Windows/Clang-cl Static:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
    CC: clang-cl
    CXX: clang-cl
  <<: *platform_windows_template

Windows/Clang-cl Shared:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
    CC: clang-cl
    CXX: clang-cl
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

Windows/Clang Static:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
    CC: clang
    CXX: clang
  <<: *platform_windows_template

Windows/Clang Shared:
  parallel:
    matrix:
    - ARCH: [amd64]
      BUILD_TYPE: [Release]
  variables:
    CC: clang
    CXX: clang
    CMAKE_OPTIONS: -D BUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

# Analysis Stage Templates

.analysis_template: &analysis_template
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  dependencies: []
  script:
    - cmake . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_VULKAN_RUNTIME_TESTS=ON -D BUILD_TESTS=ON -D BUILD_WINDOW_TESTS=OFF ${CMAKE_OPTIONS}
    - ninja -C build
    - ninja -C build test

# Analysis

Static Analysis:
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  dependencies: []
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_VULKAN_RUNTIME_TESTS=ON -D BUILD_EXAMPLES=ON -D CLANG_TIDY=ON -D CPPCHECK=ON
    - ninja -C build

Code Coverage:
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  dependencies: []
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_VULKAN_RUNTIME_TESTS=ON -D CODE_COVERAGE=ON -D BUILD_TESTS=ON -D BUILD_WINDOW_TESTS=OFF -D NO_VULKAN_RENDERER=ON
    - ninja -C build
    - ninja -C build ccov
    - ninja -C build ccov-all
    - ninja -C build ccov-report
    - ninja -C build ccov-all-report
  artifacts:
    name: CodeCoverage
    paths: 
      - build/ccov
    expire_in: 1 day

ThreadSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Thread
  <<: *analysis_template

AddressSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Address -D BUILD_VULKAN_RUNTIME_TESTS=OFF
  <<: *analysis_template

LeakSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Leak -D BUILD_VULKAN_RUNTIME_TESTS=OFF
  <<: *analysis_template

UndefinedSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Undefined
  <<: *analysis_template

# Vulkan Testing

.linux_vulkan_template: &linux_vulkan_template
  stage: Vulkan Testing
  needs: []
  dependencies: []
  script:
    - ./libs/foe_graphics_vk/tools/check_matching_device.sh --device-index 0 --device-name ${GPU}
    - cmake . -B build -G Ninja -D BUILD_TESTS=ON -D BUILD_VULKAN_RUNTIME_TESTS=ON -D BUILD_EXTRAS=ON -D CMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS}
    - ninja -C build test_foe_graphics_vk
    - ./build/libs/foe_graphics_vk/test/test_foe_graphics_vk

Arch Vulkan SW Testing:
  parallel:
    matrix:
    - ARCH: [amd64]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    GPU: llvmpipe
  <<: *linux_vulkan_template

Fedora Vulkan SW Testing:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    GPU: llvmpipe
  <<: *linux_vulkan_template

Ubuntu Vulkan SW Testing:
  parallel:
    matrix:
    - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
    GPU: llvmpipe
  <<: *linux_vulkan_template

Arch Vulkan HW Testing:
  parallel:
    matrix:
    - ARCH: [amd64]
      GPU: [vega7,navi23]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}-${GPU}
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_vulkan_template

Fedora Vulkan HW Testing:
  parallel:
    matrix:
    - ARCH: [amd64]
      GPU: [vega7,navi23]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}-${GPU}
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_vulkan_template

Ubuntu Vulkan HW Testing:
  parallel:
    matrix:
    - ARCH: [amd64]
      GPU: [vega7,navi23]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}-${GPU}
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_vulkan_template
