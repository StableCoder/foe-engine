# Global

stages:
 - Formatting
 - Arch
 - Debian
 - Fedora
 - Ubuntu
 - Windows
 - macOS
 - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CTEST_OUTPUT_ON_FAILURE: 1

# Formatting Jobs
Source Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
    - container
    - linux
    - amd64
  script:
    - mkdir build && cd build
    - cmake .. -GNinja
    - ninja format
    - git diff --exit-code

CMake Files:
  stage: Formatting
  image: docker.io/stabletec/build-foe:arch
  allow_failure: true
  tags:
    - container
    - linux
    - amd64
  script:
    - mkdir build && cd build
    - cmake .. -GNinja
    - ninja cmake-format
    - git diff --exit-code

# Platform Stage Templates

.arch_template: &arch_template
  stage: Arch
  image: docker.io/stabletec/build-foe:arch
  tags: 
    - container
    - linux
    - amd64
  needs: []
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXTRAS=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.linux_template: &linux_template
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXTRAS=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.platform_macos_template: &platform_macos_template
  stage: macOS
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXTRAS=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.platform_windows_template: &platform_windows_template
  stage: Windows
  image: docker.io/stabletec/build-foe:windows
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  tags:
    - docker-windows
    - amd64
  dependencies: []
  script:
    - mkdir build; cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXTRAS=ON $env:CMAKE_OPTIONS
    - ninja
    - ninja test

# Arch

(Debug) Arch/GCC Static (amd64):
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DCMAKE_BUILD_TYPE=Debug
  <<: *arch_template

(Debug) Arch/GCC Shared (amd64):
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug
  <<: *arch_template

(Debug) Arch/Clang Static (amd64):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DCMAKE_BUILD_TYPE=Debug
  <<: *arch_template

(Debug) Arch/Clang Shared (amd64):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug
  <<: *arch_template

Arch/GCC Static (amd64):
  variables:
    CC: gcc
    CXX: g++
  <<: *arch_template

Arch/GCC Shared (amd64):
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *arch_template

Arch/Clang Static (amd64):
  variables:
    CC: clang
    CXX: clang++
  <<: *arch_template

Arch/Clang Shared (amd64):
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *arch_template

# Debian

Debian/GCC Static (amd64):
  stage: Debian
  image: docker.io/stabletec/build-foe:debian
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DXR_SUPPORT=OFF
  <<: *linux_template

Debian/GCC Shared (amd64):
  stage: Debian
  image: docker.io/stabletec/build-foe:debian
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DXR_SUPPORT=OFF
  <<: *linux_template

Debian/Clang Static (amd64):
  stage: Debian
  image: docker.io/stabletec/build-foe:debian
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DXR_SUPPORT=OFF
  <<: *linux_template

Debian/Clang Shared (amd64):
  stage: Debian
  image: docker.io/stabletec/build-foe:debian
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DXR_SUPPORT=OFF
  <<: *linux_template

# Fedora

Fedora/GCC Static (amd64):
  stage: Fedora
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
  <<: *linux_template

Fedora/GCC Shared (amd64):
  stage: Fedora
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *linux_template

Fedora/Clang Static (amd64):
  stage: Fedora
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
  <<: *linux_template

Fedora/Clang Shared (amd64):
  stage: Fedora
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *linux_template

# Ubuntu

Ubuntu/GCC Static (amd64):
  stage: Ubuntu
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DXR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/GCC Shared (amd64):
  stage: Ubuntu
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DXR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/Clang Static (amd64):
  stage: Ubuntu
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DXR_SUPPORT=OFF
  <<: *linux_template

Ubuntu/Clang Shared (amd64):
  stage: Ubuntu
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON -DXR_SUPPORT=OFF
  <<: *linux_template

# macOS

macOS/Clang Static (amd64):
  tags:
    - macos
    - amd64
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_macos_template

macOS/Clang Shared (amd64):
  tags:
    - macos
    - amd64
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *platform_macos_template

# Windows

Windows/MSVC Static (amd64):
  variables:
  <<: *platform_windows_template

Windows/MSVC Shared (amd64):
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

Windows/Clang-cl Static (amd64):
  variables:
    CC: clang-cl
    CXX: clang-cl
  <<: *platform_windows_template

Windows/Clang-cl Shared (amd64):
  variables:
    CC: clang-cl
    CXX: clang-cl
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

Windows/Clang Static (amd64):
  variables:
    CC: clang
    CXX: clang
  <<: *platform_windows_template

Windows/Clang Shared (amd64):
  variables:
    CC: clang
    CXX: clang
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  <<: *platform_windows_template

# Analysis Stage Templates

.analysis_template: &analysis_template
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DBUILD_WINDOW_TESTS=OFF -DNO_VULKAN_RENDERER=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja test

# Analysis

Static Analysis:
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  dependencies: []
  variables:
    CC: clang
    CXX: clang++
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DCLANG_TIDY=ON -DCPPCHECK=ON
    - ninja

Code Coverage:
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  needs:
    - (Debug) Arch/GCC Static (amd64)
    - (Debug) Arch/GCC Shared (amd64)
    - (Debug) Arch/Clang Static (amd64)
    - (Debug) Arch/Clang Shared (amd64)
    - Arch/GCC Static (amd64)
    - Arch/GCC Shared (amd64)
    - Arch/Clang Static (amd64)
    - Arch/Clang Shared (amd64)
  dependencies: []
  variables:
    CC: clang
    CXX: clang++
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON -DBUILD_TESTS=ON -DBUILD_WINDOW_TESTS=OFF -DNO_VULKAN_RENDERER=ON
    - ninja
    - ninja ccov
    - ninja ccov-all
    - ninja ccov-report
    - ninja ccov-all-report
  artifacts:
    name: CodeCoverage
    paths: 
      - build/ccov
    expire_in: 1 day

ThreadSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DUSE_SANITIZER=Thread
  <<: *analysis_template

AddressSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DUSE_SANITIZER=Address
  <<: *analysis_template

LeakSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DUSE_SANITIZER=Leak
  <<: *analysis_template

UndefinedSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -DUSE_SANITIZER=Undefined
  <<: *analysis_template